/*
 * @test
 * @run
 */
import f3.lang.F3;

var CompilerProperties:String[] = ["compiler.err.f3.applied.to.instance.var",
"compiler.err.f3.bad.character",
"compiler.err.f3.bad.def",
"compiler.err.f3.bad.percent",
"compiler.err.f3.bad.str.compound",
"compiler.err.f3.bad.try",
"compiler.err.f3.base.java.class.non.papar.ctor",
"compiler.err.f3.bound.function.must.not.be.void",
"compiler.err.f3.bound.override.meth",
"compiler.err.f3.can.not.import.boolean.primitive.type",
"compiler.err.f3.can.not.import.integer.primitive.type",
"compiler.err.f3.can.not.import.number.primitive.type",
"compiler.err.f3.can.not.import.string.primitive.type",
"compiler.err.f3.cannot.assign.to.def",
"compiler.err.f3.cannot.assign.to.parameter",
"compiler.err.f3.cannot.infer.return.type",
"compiler.err.f3.cannot.modify.localvar",
"compiler.err.f3.cannot.override.default.initializer",
"compiler.err.f3.cant.apply.function",
"compiler.err.f3.def.must.have.init",
"compiler.err.f3.exponent.malformed",
"compiler.err.f3.expr.unsupported.for.bidi.bind",
"compiler.err.f3.finally.notlast",
"compiler.err.f3.finally.toomany",
"compiler.err.f3.func.unnamed",
"compiler.err.f3.function.declared.overrride.does.not.override",
"compiler.err.f3.function.type.infer.cycle",
"compiler.err.f3.garbled.declaration",
"compiler.err.f3.garbled.expression",
"compiler.err.f3.generalerror",
"compiler.err.f3.generics.unsupported",
"compiler.err.f3.hex.float",
"compiler.err.f3.hex.malformed",
"compiler.err.f3.hex.missing",
"compiler.err.f3.import.bad.name",
"compiler.err.f3.import.bad.star",
"compiler.err.f3.incomplete.qual",
"compiler.err.f3.indexof.not.found",
"compiler.err.f3.invalid.assignment",
"compiler.err.f3.lexer.literal.range",
"compiler.err.f3.loose.expressions",
"compiler.err.f3.mod.not.allowed.on",
"compiler.err.f3.mod.not.allowed.on.instance",
"compiler.err.f3.mod.not.allowed.on.local",
"compiler.err.f3.mod.not.allowed.on.script",
"compiler.err.f3.must.be.an.attribute",
"compiler.err.f3.non.bound.override.meth",
"compiler.err.f3.not.a.function",
"compiler.err.f3.not.allowed.in.bind.context",
"compiler.err.f3.not.ne",
"compiler.err.f3.not.supported.attribute",
"compiler.err.f3.not.supported.private",
"compiler.err.f3.not.supported.readable",
"compiler.err.f3.octal.float",
"compiler.err.f3.octal.malformed",
"compiler.err.f3.only.one.base.java.class.allowed",
"compiler.err.f3.orphaned.catch",
"compiler.err.f3.orphaned.else",
"compiler.err.f3.orphaned.finally",
"compiler.err.f3.range.end.int.or.number",
"compiler.err.f3.range.start.int.or.number",
"compiler.err.f3.range.step.int.or.number",
"compiler.err.f3.report.bind.access",
"compiler.err.f3.report.init.access",
"compiler.err.f3.report.var.query.access",
"compiler.err.f3.report.write.access",
"compiler.err.f3.reserved.top.level.script.member",
"compiler.err.f3.run.function.param",
"compiler.err.f3.run.function.single",
"compiler.err.f3.semi.required",
"compiler.err.f3.string.concatenation",
"compiler.err.f3.too.many.parameters",
"compiler.err.f3.type.infer.cycle.var.ref",
"compiler.err.f3.typed.override",
"compiler.err.f3.unescaped.rbrace",
"compiler.err.f3.unterminated.string",
"compiler.err.f3.unterminated.string.expression",
"compiler.err.f3.var.not.supported.here",
"compiler.err.f3.void.sequence.not.allowed",
"compiler.err.f3.wrong.type.for.bidi.bind",
"compiler.err.f3.multiple.default.vars",
"compiler.err.f3.no.default.declared",
"compiler.err.neither.conditional.subtype",
"compiler.err.plugin.cannot.find.plugin",
"compiler.misc.deprecated.interface.class",
"compiler.misc.version.resource.missing",
"compiler.misc.version.unknown",
"compiler.note.f3.internal.error",
"compiler.note.f3.optimization.statistic",
"compiler.note.f3.type.infer.cycle.fun.decl",
"compiler.note.f3.type.infer.cycle.var.decl",
"compiler.warn.illegal.forward.ref",
"compiler.warn.f3.ambiguous.param.type.from.super",
"compiler.warn.f3.ambiguous.return.type.from.super",
"compiler.warn.f3.function.overrides.another.should.be.declared.override",
"compiler.warn.f3.generalwarning",
"compiler.warn.f3.iterating.non.sequence",
"compiler.warn.f3.range.literal.empty",
"compiler.warn.f3.redundant.access.modifiers",
"compiler.warn.f3.static.deprecated",
"compiler.warn.plugin.cannot.load.plugin",
"f3.msg.bug",
"f3.opt.arg.name",
"f3.opt.classpath",
"f3.opt.platform",
"opt.arg.path"];

var propcount = 0;
for (cp in CompilerProperties) {
  var v = F3.getProperty(cp);
  propcount++;
  if( v != null) { println("{cp} = {v}");
  }
}
println("checked for {propcount} properties.");
