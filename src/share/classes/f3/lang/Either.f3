package f3.lang;

public abstract class Either of (a, b) //is org.f3.runtime.Monad of (Either, b)
{
    public abstract function case of c 
	from (i1 is function from a to c, 
	      i2 is function from b to c) 
	to c;

    /*
    override abstract public function map of c 
	from (f is function from b to c) 
	to Either of (a, c);

    abstract public function flatmap of c 
	from (f is function from b to Either of (a, c)) 
	to Either of (a, c);

    public function case of (c, d) 
	from (this is Either of (Either of (a, b), c),
	      f is function from a to d,
	      g is function from b to d,
	      h is function from c to d) to d
    {
	this.case(function from (y is Either of (a, b)) to d 
		  {
		      y.case(f, g);
		  },
		  h)
    }
    public function case of (c, d, e) 
	from (this is Either of (Either of (Either of (a, b), c), d),
	      f is function from a to e,
	      g is function from b to e,
	      h is function from c to e,
	      i is function from d to e) to e
    {
        this.case(function from (y is Either of (Either of (a, b), c)) to e 
                  {
                      y.case(function from (z is Either of (a, b)) to e 
                             {
                                 z.case(f, g);
                             },
                             h);
                  },
                  i) 
    }
    */

    public function swap to Either of (b, a) 
    {
	const self = this;
	Either of (b, a) 
	{
/*
	    override public function map of c 
		from (f is function from a to c) 
		to Either of (b, c)
	    {
		self.case(function from (x is a) to Either of (b, c) 
			  {
			      Latter of (b, c) (f(x))
			  },
			  function from (y is b) to Either of (b, c) 
			  {
			      Former of (b, c) (y);
			  });
	    }

	    override public function flatmap of c 
		from (f is function from a to Either of (b, c)) 
		to Either of (b, c)
	    {
		self.case(function from (x is a) to Either of (b, c) 
			  {
			      f(x);
			  },
			  function from (y is b) to Either of (b, c) 
			  {
			      Former of (b, c) (y);
			  });
		
	    }
*/
	    override function case of c from (f is function from b to c, 
					      g is function from a to c) to c
	    {
		self.case(g, f)
	    }
	}
    }


    public function getFormerOrElse from (Default is a) to a {
        return Default;
    }

    public function getLatterOrElse from (Default is b) to b {
        return Default;
    }

    public function getFormer to java.lang.Iterable of a 
    {
	java.util.Collections.emptySet of a()
    }

    public function getLatter to java.lang.Iterable of b 
    {
	java.util.Collections.emptySet of b()
    }
}

public function Former of (a, b) from (x is a) to Either of (a, b) 
{
    Either of (a, b) {
        override function getFormerOrElse from (Default is a) to a {
            x
        }

	override function toString to String 
	{
	    "Former: {x}";
	}

	override function case of c 
	    from (i1 is function from a to c, 
		  _ is function from b to c) 
	    to c
	{
	    i1(x);
	}
/*
	override public function map of c from (f is function from b to c) to Either of (a, c)
	{
	    Former of (a, c) (x);
	}

	override public function flatmap of c from (f is function from b to Either of (a, c)) to Either of (a, c)
	{
	    Former of (a, c) (x);
	}
*/	
	override function getFormer to java.lang.Iterable of a 
	{
	    java.lang.Iterable of a {
		override function iterator to java.util.Iterator of a 
		{
		    java.util.Iterator of a {
			var flag = true;
			override function hasNext to Boolean 
			{
			    return flag;
			}
			override function next to a 
			{
			    flag = false; return x;
			}
			override function remove {}
		    }
		}
	    }
	}
        override function swap to Either of (b, a) {
            Latter of (b, a)(x);
        }
    }

}

public function Latter of (a, b) from (y is b) to Either of (a, b) 
{
    Either of (a, b) {

        override function getLatterOrElse from (Default is b) to b {
            y
        }

	override function toString to String 
	{
	    "Latter: {y}";
	}

	override function case of c 
	    from (f is function from a to c, 
		  g is function from b to c) 
	    to c
	{
	    g(y);
	}
/*
	override public function map of c 
	    from (f is function from b to c) 
	    to Either of (a, c)
	{
	    Latter of (a, c) (f(y));
	}

	override public function flatmap of c 
	    from (f is function from b to Either of (a, c)) 
	    to Either of (a, c)
	{
	    f(y);
	}
*/
        override function swap to Either of (b, a) {
            Former of (b, a)(y);
        }

	override function getLatter to java.lang.Iterable of b 
	{
	    java.lang.Iterable of b {
		override function iterator to java.util.Iterator of b 
		{
		    java.util.Iterator of b {
			var flag = true;
			override function hasNext to Boolean 
			{
			    return flag;
			}
			override function next to b 
			{
			    flag = false; return y
			}
			override function remove {}
		    }
		}
	    }
	}
    }
}