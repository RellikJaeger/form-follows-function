package f3.math;
import org.f3.runtime.*;
import java.lang.Math;

public const <<0>> = new Tuple3(0, 0, 0);
public const <<1>> = new Tuple3(1, 1, 1);

public class Tuple3 is F3Value, java.lang.Comparable of Tuple3 
{
    public const x is Number;
    public const y is Number;
    public const z is Number;

    public function negate to Tuple3 {
	Tuple3 {
	    x: x;
	    y: y;
	    z: z;
	}
    }

    override public function equals from (obj is Object) to Boolean 
    {
	obj is Tuple3 and {
	    const v = obj as Tuple3;
	    x == v.x and 
	    y == v.y and
	    z == v.z
	}
    }
    public function map from (f is function from Number to Number) to Tuple3 
    {
	new Tuple3(f(x), f(y), f(z));
    }

    public function zip from (v is Tuple3, f is function from (Number, Number) to Number) to Tuple3
    {
    	new Tuple3(f(x, v.x), f(y, v.y), f(z, v.z));
    }

    public function add from (x is Number, y is Number, z is Number) to Tuple3
    {
        new Tuple3(this.x+x, this.y+y, this.z+z)
    }

    public function sub from (x is Number, y is Number, z is Number) to Tuple3
    {
        new Tuple3(this.x-x, this.y-y, this.z-z)
    }

    public function div from (x is Number, y is Number, z is Number) to Tuple3
    {
        new Tuple3(this.x/x, this.y/y, this.z/z)
    }

    public function mul from (x is Number, y is Number, z is Number) to Tuple3
    {
        new Tuple3(this.x*x, this.y*y, this.z*z)
    }

    public function + from (n is Tuple3) to Tuple3 
    {
	Tuple3 {
	    x: x + n.x;
	    y: y + n.y;
	    z: z + n.z;
	}
    }

    public function - from (n is Tuple3) to Tuple3 
    {
	Tuple3 {
	    x: x - n.x;
	    y: y - n.y;
	    z: z - n.z;
	}
    }

    public function / from (n is Tuple3) to Tuple3 
    {
	Tuple3 {
	    x: x / n.x;
	    y: y / n.y;
	    z: z / n.z;
	}
    }

    public function mul from (tuple is Tuple3) to Tuple3
    {
        Tuple3 {
            x: x * tuple.x;
            y: y * tuple.y;
            z: z * tuple.z;
        }
    }

    public function * from (vector is Vec3) to Vec3 
    {
        vector * this;
    }

    public function * from (point is Point3) to Point3 
    {
        point * this;
    }

    public function * from (n is Number) to Tuple3 
    {   
    	if n == 0 then <<0>> else if n == 1 then this else
	Tuple3 { 
	    x: x*n;
	    y: y*n;
	    z: z*n;
	}
    }

    public function / from (n is Number) to Tuple3 
    {   
	Tuple3 { 
	    x: x/n;
	    y: y/n;
	    z: z/n;
	}
    }

    public function lengthSquared to Number 
    {
	x*x + 
        y*y +
	z*z    
    }

    public function length to Number
    {
	Math.sqrt(lengthSquared());
    }

    override function toString to String 
    {
	"\{ x: {x}, y: {y}, z: {z} \}"
    }

    public function get from (i is Integer) to Number 
    {
	if (i == 0) then x else if i == 1 then y else if i == 2 then z else 0.0;
    }

    public function min from (v is Tuple3) to Tuple3 
    {
	if (v == this) v else new Tuple3(Math.min(x, v.x), Math.min(y, v.y), Math.min(z, v.z))
    }

    public function max from (v is Tuple3) to Tuple3 
    {
	if (v == this) v else new Tuple3(Math.max(x, v.x), Math.max(y, v.y), Math.max(z, v.z))
    }

    public override function compareTo from (v is Tuple3) to Integer {
        var cmp = x - v.x;
        if (cmp <> 0) return Math.signum(cmp) as Integer;
        cmp = y - v.y;
        if (cmp <> 0) return Math.signum(cmp) as Integer;
        cmp = z - v.z;
        if (cmp <> 0) return Math.signum(cmp) as Integer;
        return 0;
    }
}

public const TYPE_INFO is TypeInfo of ..Tuple3 = 
       org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(Tuple3.<<0>>);