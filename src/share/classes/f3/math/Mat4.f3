package f3.math;
import java.lang.Math;
import LinearMath.*;
import f3.math.Util.*;
import org.f3.runtime.F3Value;

public abstract class Transformable of a 
{
    abstract public function premultiply from (m is Mat4) to a;
}

public class Mat4 is F3Value
{
    // column 1                 // column 2                 // column 3                 // column 4
    public const xx is Number;  public const xy is Number;  public const xz is Number;  public const xw is Number;  
    public const yx is Number;  public const yy is Number;  public const yz is Number;  public const yw is Number;  
    public const zx is Number;  public const zy is Number;  public const zz is Number;  public const zw is Number;  
    public const wx is Number;  public const wy is Number;  public const wz is Number;  public const ww is Number;  

    override public function equals from (obj is Object) to Boolean 
    {
	super.equals(obj) or 
	    (obj is Mat4 and 
	     {
		 const m = obj as Mat4;
		 xx == m.xx and xy == m.xy and xz == m.xz and xw == m.xw and
		 yx == m.yx and yy == m.yy and yz == m.yz and yw == m.yw and
		 zx == m.zx and wy == m.zy and zz == m.zz and zw == m.zw and
		 wx == m.wx and zy == m.wy and wz == m.wz and ww == m.ww
	     })
    }

    public function getTranslation to Point3 
    {
    	Point3 {
	    x: xw
	    y: yw
	    z: zw
	}
    }

    public function * of a from (x is Transformable of a) to a 
    {
	x.premultiply(this)
    }

    public function * from (v is Vec3) to Vec3 
    {
	mul(v);
    }

    public function * from (p is Point3) to Point3
    {
	mul(p);
    }

    public function get 
	from (row is Number,
	      col is Number) 
	to Number 
    {
	if (row == 0) {
	    if (col == 0) {
		xx
	    } else if (col == 1) {
		xy
	    } else if (col == 2) {
		xz
	    } else if (col == 3) {
		xw
	    } else 0
	} else if (row == 1) {
	    if (col == 0) {
		yx
	    } else if (col == 1) {
		yy
	    } else if (col == 2) {
		yz
	    } else if (col == 3) {
		yw
	    } else 0
	} else if (row == 2) {
	    if (col == 0) {
		zx
	    } else if (col == 1) {
		zy
	    } else if (col == 2) {
		zz
	    } else if (col == 3) {
		zw
	    } else 0
	} else if (row == 3) {
	    if (col == 0) {
		wx
	    } else if (col == 1) {
		wy
	    } else if (col == 2) {
		wz
	    } else if (col == 3) {
		ww
	    } else 0
	} else 0
    }

    public function mul 
	from (v is Vec3) 
	to Vec3 
    {
	if (this == <<1>>)
	    then v
	    else {
		const x = get(0, 0) * v.x + get(0, 1) * v.y + get(0, 2) * v.z; 
		const y = get(1, 0) * v.x + get(1, 1) * v.y + get(1, 2) * v.z;
		const z = get(2, 0) * v.x + get(2, 1) * v.y + get(2, 2) * v.z;
		Vec3 {
		    x: x;
		    y: y;
		    z: z;
		}
	    }
    }

    public function mul 
	from (p is Point3) 
	to Point3
    {
	if (this == <<1>>) 
	    then p
	    else {
		const x = get(0, 0) * p.x + get(0, 1) * p.y + get(0, 2) * p.z + get(0, 3);
		const y = get(1, 0) * p.x + get(1, 1) * p.y + get(1, 2) * p.z + get(1, 3);
		const z = get(2, 0) * p.x + get(2, 1) * p.y + get(2, 2) * p.z + get(2, 3);
		Point3 {
		    x: x;
		    y: y;
		    z: z;
		}
	    }
    }

    public function mul 
	from (v is Vec4) 
	to Vec4 
    {
        if (this == <<1>>) 
	    then v 
	    else {
		const x = get(0, 0) * v.x + get(0, 1) * v.y + get(0, 2) * v.z + get(0, 3) * v.w;
		const y = get(1, 0) * v.x + get(1, 1) * v.y + get(1, 2) * v.z + get(1, 3) * v.w;
		const z = get(2, 0) * v.x + get(2, 1) * v.y + get(2, 2) * v.z + get(2, 3) * v.w;
		const w = get(3, 0) * v.x + get(3, 1) * v.y + get(3, 2) * v.z + get(3, 3) * v.w;
		Vec4 {
		    x: x;
		    y: y;
		    z: z;
		    w: w;
		}
	    }
    }

    public function mul 
	from (m is Mat4) 
	to Mat4
    {
	if (this == <<1>>) 
	    then m
	    else if (m == <<1>>) then this
		else
	        Mat4 {
		    // this.row1 dot m.column1
		    xx: xx * m.xx + xy * m.yx + xz * m.zx + xw * m.wx;
		    // this.row2 dot m.column1
		    yx: yx * m.xx + yy * m.yx + yz * m.zx + yw * m.wx;
		    // this.row3 dot m.column1
		    zx: zx * m.xx + zy * m.yx + zz * m.zx + zw * m.wx;
		    // this.row4 dot m.column1
		    wx: wx * m.xx + wy * m.yx + wz * m.zx + ww * m.wx;
		 
		    xy: xx * m.xy + xy * m.yy + xz * m.zy + xw * m.wy;
		    // this.row2 dot m.column2
		    yy: yx * m.xy + yy * m.yy + yz * m.zy + yw * m.wy;
		    // this.row3 dot m.column2
		    zy: zx * m.xy + zy * m.yy + zz * m.zy + zw * m.wy;
		    // this.row4 dot m.column2
		    wy: wx * m.xy + wy * m.yy + wz * m.zy + ww * m.wy;

		    xz: xx * m.xz + xy * m.yz + xz * m.zz + xw * m.wz;
		    // this.row2 dot m.column3
		    yz: yx * m.xz + yy * m.yz + yz * m.zz + yw * m.wz;
		    // this.row3 dot m.column3
		    zz: zx * m.xz + zy * m.yz + zz * m.zz + zw * m.wz;
		    // this.row4 dot m.column3
		    wz: wx * m.xz + wy * m.yz + wz * m.zz + ww * m.wz;

		    xw: xx * m.xw + xy * m.yw + xz * m.zw + xw * m.ww;
		    // this.row2 dot m.column4
		    yw: yx * m.xw + yy * m.yw + yz * m.zw + yw * m.ww;
		    // this.row3 dot m.column4
		    zw: zx * m.xw + zy * m.yw + zz * m.zw + zw * m.ww;
		    // this.row4 dot m.column4
		    ww: wx * m.xw + wy * m.yw + wz * m.zw + ww * m.ww;
		}

    }

    override function toString to String
    {
        "{%16f xx} {%16f xy} {%16f xz} {%16f xw}\n"
	"{%16f yx} {%16f yy} {%16f yz} {%16f yw}\n"
	"{%16f zx} {%16f zy} {%16f zz} {%16f zw}\n"
	"{%16f wx} {%16f wy} {%16f wz} {%16f ww}"
    }
    
    public function transpose to Mat4 {
	if (this == <<1>>) then this else fromColumns(getRows(null));
    }

    public function inverse to Mat4 
    {
        if <<1>> == this then this else invertGeneral(false);
    }

    public function inverseTranspose to Mat4 
    {
        if <<1>> == this then this else invertGeneral(true);
    }

    public function getRows from (arr0 is nativearray of Number) to nativearray of Number 
    {
	var arr is nativearray of Number = arr0;
        if (arr == null) arr = newFloatArray(16);
        arr[0] = xx;
        arr[1] = xy;
        arr[2] = xz;
        arr[3] = xw;

        arr[4] = yx;
        arr[5] = yy;
        arr[6] = yz;
        arr[7] = yw;

        arr[8] = zx;
        arr[9] = zy;
        arr[10] = zz;
        arr[11] = zw;

        arr[12] = wx;
        arr[13] = wy;
        arr[14] = wz;
        arr[15] = ww;
        return arr;
    }

    function invertGeneral from (transpose is Boolean) to Mat4 
    {
	var temp is nativearray of Number = newFloatArray(16);
	var result is nativearray of Number = newFloatArray(16);
	var row_perm is nativearray of Integer = newIntArray(4);
	var i is Integer;
	var r is Integer;
	var c is Integer;

        // Use LU decomposition and backsubstitution code specifically
        // for floating-point 4x4 matrices.
        // Copy source matrix to t1tmp 
        getRows(temp);
        // Calculate LU decomposition: Is the matrix singular? 
        if (not luDecomposition(temp, row_perm)) {
            // Matrix has no inverse 
            throw new java.lang.RuntimeException("matrix has no inverse: {this}");
        }
        // Perform back substitution on the identity matrix 
        result[0] = 1.0; result[5] = 1.0; result[10] = 1.0; result[15] = 1.0;
        luBacksubstitution(temp, row_perm, result);
	if transpose then fromColumns(result) else fromRows(result);
    }

    public function getColumns from (arr0 is nativearray of Number) to nativearray of Number
    {
	var arr is nativearray of Number = arr0;
        if (arr == null) arr = newFloatArray(16);
        arr[0] = xx;
        arr[1] = yx;
        arr[2] = zx;
        arr[3] = wx;

        arr[4] = xy;
        arr[5] = yy;
        arr[6] = zy;
        arr[7] = wy;

        arr[8] = xz;
        arr[9] = yz;
        arr[10] = zz;
        arr[11] = wz;

        arr[12] = xw;
        arr[13] = yw;
        arr[14] = zw;
        arr[15] = ww;
        return arr;
    }
}

public var <<1>> = Mat4 {xx: 1.0, xy: 0.0, xz: 0.0, xw: 0.0 
                         yx: 0.0, yy: 1.0, yz: 0.0, yw: 0.0
                         zx: 0.0, zy: 0.0, zz: 1.0, zw: 0.0
                         wx: 0.0, wy: 0.0, wz: 0.0, ww: 1.0};

public var <<0>> = Mat4 {xx: 0.0, xy: 0.0, xz: 0.0, xw: 0.0 
                         yx: 0.0, yy: 0.0, yz: 0.0, yw: 0.0
                         zx: 0.0, zy: 0.0, zz: 0.0, zw: 0.0
                         wx: 0.0, wy: 0.0, wz: 0.0, ww: 0.0};

public function fromRows from (a is nativearray of Number) to Mat4 
{
    Mat4 {
	xx: a[0],  xy: a[1],  xz: a[2],  xw: a[3]; 
	yx: a[4],  yy: a[5],  yz: a[6]   yw: a[7];
	zx: a[8],  zy: a[9],  zz: a[10], zw: a[11];
	wx: a[12], wy: a[13], wz: a[14], ww: a[15];
    }
}

public function fromColumns from (a is nativearray of Number) to Mat4 
{
    Mat4 {
	xx: a[0],  xy: a[4],  xz: a[8],  xw: a[12]; 
	yx: a[1],  yy: a[5],  yz: a[9]   yw: a[13];
	zx: a[2],  zy: a[6],  zz: a[10], zw: a[14];
	wx: a[3],  wy: a[7],  wz: a[11], ww: a[15];
    }
}

/**
 * Given a 4x4 array "matrix0", this function replaces it with the 
 * LU decomposition of a row-wise permutation of itself.  The input 
 * parameters are "matrix0" and "dimen".  The array "matrix0" is also 
 * an output parameter.  The vector "row_perm[4]" is an output 
 * parameter that contains the row permutations resulting from partial 
 * pivoting.  The output parameter "even_row_xchg" is 1 when the 
 * number of row exchanges is even, or -1 otherwise.  Assumes data 
 * type is always float.
 *
 * This function is similar to luDecomposition, except that it
 * is tuned specifically for 4x4 matrices.
 *
 * @return true if the matrix is nonsingular, or false otherwise.
 */
//
// Reference: Press, Flannery, Teukolsky, Vetterling, 
//	      _Numerical_Recipes_in_C_, Cambridge University Press, 
//	      1988, pp 40-45.
//
function luDecomposition
    from (matrix00 is nativearray of Number,
	  row_perm0 is nativearray of Integer) 
    to Boolean 
{
    var matrix0 = matrix00;
    var row_perm = row_perm0;
    var row_scale is nativearray of Number = newFloatArray(4);

    // Determine implicit scaling information by looping over rows 
    {
	var i is Integer;
	var j is Integer;
	var ptr = 0;
	var rs = 0;
	var big is Number;
	var temp is Number;
            // For each row ... 
	i = 4;
	while (i-- != 0) {
	    big = 0.0;
	    // For each column, find the largest element in the row 
	    j = 4;
	    while (j-- != 0) {
		temp = matrix0[ptr++];
		temp = Math.abs(temp);
		if (temp > big) {
		    big = temp;
		}
	    }
	    
	    // Is the matrix singular? 
	    if (big == 0.0) {
		return false;
	    }
	    row_scale[rs++] = 1.0 / big;
	}
        {
            //var j is Integer;
            var mtx is Integer;

            mtx = 0;
            // For all columns, execute Crout's method 
            for (j0 in [0..<4]) {
	        j = j0;
		//var i is Integer;
		var imax is Integer;
		var k is Integer;
		var target is Integer;
		var p1 is Integer;
		var p2 is Integer;
		var sum is Number;
		//var big is Number;
		//var temp is Number;
                for (i0 in [0..<j]) {
		    i = i0;
                    target = mtx + (4*i) + j;
                    sum = matrix0[target];
                    k = i;
                    p1 = mtx + (4*i);
                    p2 = mtx + j;
                    while (k-- != 0) {
                        sum -= matrix0[p1] * matrix0[p2];
                        p1++;
                        p2 += 4;
                    }
                    matrix0[target] = sum;
                }

                // Search for largest pivot element and calculate
                // intermediate elements of lower diagonal matrix L.
                big = 0.0;
                imax = -1;
                for (i0 in [j..<4]) {
		    i = i0;
                    target = mtx + (4*i) + j;
                    sum = matrix0[target];
                    k = j;
                    p1 = mtx + (4*i);
                    p2 = mtx + j;
                    while (k-- != 0) {
                        sum -= matrix0[p1] * matrix0[p2];
                        p1++;
                        p2 += 4;
                    }
                    matrix0[target] = sum;

                    // Is this the best pivot so far? 
                    if ((temp = row_scale[i] * Math.abs(sum)) >= big) {
                        big = temp;
                        imax = i;
                    }
                }

                if (imax < 0) {
                    throw new java.lang.RuntimeException("Logic error: imax < 0");
                }

                // Is a row exchange necessary? 
                if (j != imax) {
                    // Yes: exchange rows 
                    k = 4;
                    p1 = mtx + (4*imax);
                    p2 = mtx + (4*j);
                    while (k-- != 0) {
                        temp = matrix0[p1];
                        matrix0[p1++] = matrix0[p2];
                        matrix0[p2++] = temp;
                    }

                    // Record change in scale factor 
                    row_scale[imax] = row_scale[j];
                }

                // Record row permutation 
                row_perm[j] = imax;

                // Is the matrix singular 
                if (matrix0[(mtx + (4*j) + j)] == 0.0) {
                    return false;
                }

                // Divide elements of lower diagonal matrix L by pivot 
                if (j != (4-1)) {
                    temp = 1.0 / (matrix0[(mtx + (4*j) + j)]);
                    target = mtx + (4*(j+1)) + j;
                    i = 3 - j;
                    while (i-- != 0) {
                        matrix0[target] *= temp;
                        target += 4;
                    }
                }
            }
        }
        return true;
    }
}

/**
 * Solves a set of linear equations.  The input parameters "matrix1",
 * and "row_perm" come from luDecompostionD4x4 and do not change
 * here.  The parameter "matrix2" is a set of column vectors assembled
 * into a 4x4 matrix of floating-point values.  The procedure takes each
 * column of "matrix2" in turn and treats it as the right-hand side of the
 * matrix equation Ax = LUx = b.  The solution vector replaces the
 * original column of the matrix.
 *
 * If "matrix2" is the identity matrix, the procedure replaces its contents
 * with the inverse of the matrix from which "matrix1" was originally
 * derived.
 */
//
// Reference: Press, Flannery, Teukolsky, Vetterling, 
//	      _Numerical_Recipes_in_C_, Cambridge University Press, 
//	      1988, pp 44-45.
//
function luBacksubstitution
    from (matrix1p is nativearray of Number,
	  row_permp is nativearray of Integer,
	  matrix2p is nativearray of Number) 
    to Void
{
    var matrix1 = matrix1p;
    var row_perm = row_permp;
    var matrix2 = matrix2p;
    var i = 0;
    var ii = 0;
    var ip = 0;
    var j = 0;
    var k = 0;
    var rp = 0;
    var cv = 0; 
    var rv = 0;
    
    //	rp = row_perm;
    
    // For each column vector of matrix2 ... 
    for (k0 in [k..<4]) {
	k = k0;
	//	    cv = &(matrix2[0][k]);
	cv = k;
	ii = -1;
	
	// Forward substitution 
	for (i0 in [0..<4]) {
	    i = i0;
	    var sum is Number;
	    
	    ip = row_perm[rp+i];
	    sum = matrix2[cv+4*ip];
	    matrix2[cv+4*ip] = matrix2[cv+4*i];
	    if (ii >= 0) {
		//		    rv = &(matrix1[i][0]);
		rv = i*4;
		for (j0 in [ii..i-1]) {
		    j = j0;
		    sum -= matrix1[rv+j] * matrix2[cv+4*j];
		}
	    }
	    else if (sum != 0.0) {
		ii = i;
	    }
	    matrix2[cv+4*i] = sum;
	}
	
	// Backsubstitution 
	//	    rv = &(matrix1[3][0]);
	rv = 3*4;
	matrix2[cv+4*3] /= matrix1[rv+3];
	
	rv -= 4;
	matrix2[cv+4*2] = (matrix2[cv+4*2] -
			   matrix1[rv+3] * matrix2[cv+4*3]) / matrix1[rv+2];
	
	rv -= 4;
	matrix2[cv+4*1] = (matrix2[cv+4*1] -
			   matrix1[rv+2] * matrix2[cv+4*2] -
			   matrix1[rv+3] * matrix2[cv+4*3]) / matrix1[rv+1];
	
	rv -= 4;
	matrix2[cv+4*0] = (matrix2[cv+4*0] -
			   matrix1[rv+1] * matrix2[cv+4*1] -
			   matrix1[rv+2] * matrix2[cv+4*2] -
			   matrix1[rv+3] * matrix2[cv+4*3]) / matrix1[rv+0];
    }
}


function run {
    const m = translate(13, 12, 11);
    println("m={m}");
    println(m * Vec3.<<1>> * 2);
    const inv = m.inverse();
    println("inv={inv}");
    println("translation={inv.getTranslation()}");
    println(inv * Point3.<<1>>);
    println(m * Point3.<<1>> * 2);
}

public static def TYPE_INFO = org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(<<1>>);
