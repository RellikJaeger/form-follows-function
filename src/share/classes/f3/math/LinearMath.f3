package f3.math;
import java.lang.Math;
import f3.math.Quat.*;

public static const EPSILON = 0.000001;
public static const ZERO_TOLERANCE = .00001;

public function quat
    from (rx is Number,
	  ry is Number,
	  rz is Number)
    to Quat
{
    Quat(rx, ry, rz)
}


public function vector 
    from (x is Number,
	  y is Number)
    to Vec2 
{
    Vec2 {
	x: x;
	y: y;
    }
}

public function point
    from (x is Number,
	  y is Number)
    to Point2
{
    Point2 {
	x: x;
	y: y;
    }
}

public function vector 
    from (x is Number,
	  y is Number,
	  z is Number) 
    to Vec3 
{
    Vec3 {
	x: x;
	y: y;
	z: z;
    }
}

public function tuple
    from (x is Number,
	  y is Number)
    to Tuple2 
{
    Tuple2 {
	x: x;
	y: y;
    }
}

public function tuple
    from (xyz is Tuple3,
    	  w is Number)
    to Tuple4
{
    tuple(xyz.x, xyz.y, xyz.z, w);
}
 
public function tuple
    from (x is Number,
	  y is Number,
	  z is Number) 
    to Tuple3 
{
    Tuple3 {
	x: x;
	y: y;
	z: z;
    }
}

public function tuple
    from (x is Number,
	  y is Number,
	  z is Number,
	  w is Number) 
    to Tuple4 
{
    Tuple4 {
	x: x;
	y: y;
	z: z;
	w: w;
    }
}

public function point 
    from (x is Number,
	  y is Number,
	  z is Number) 
    to Point3
{
    Point3 {
	x: x;
	y: y;
	z: z;
    }
}

public function point
    from (v is Tuple3) 
    to Point3 
{
    point(v.x, v.y, v.z);
}

public function vector
    from (v is Tuple3,
	  w is Number) 
    to Vec4 
{
    vector(v.x, v.y, v.z, w);
}

public function vector 
    from (x is Number,
	  y is Number,
	  z is Number,
	  w is Number) 
    to Vec4 
{
    Vec4 {
	x: x;
	y: y;
	z: z;
	w: w;
    }
}

public function translate 
    from (x is Number, y is Number) 
    to Mat4 
{
    translate(x, y, 0);
}

// row major
public function matrix 
    from (xx is Number, xy is Number, xz is Number, xw is Number,
	  yx is Number, yy is Number, yz is Number, yw is Number,
	  zx is Number, zy is Number, zz is Number, zw is Number,
	  wx is Number, wy is Number, wz is Number, ww is Number) 
    to Mat4 
{
    Mat4 {
	xx: xx, xy: xy, xz: xz, xw: xw;
	yx: yx, yy: yy, yz: yz, yw: yw;
	zx: zx, zy: zy, zz: zz, zw: zw;
	wx: wx, wy: wy, wz: wz, ww: ww;
    }
}

public function translate 
    from (x is Number, y is Number, z is Number) 
    to Mat4 
{
    if (x == 0 and y == 0 and z == 0) 
	then Mat4.<<1>> 
	else 
	    matrix(1, 0, 0, x,
		   0, 1, 0, y,
		   0, 0, 1, z,
		   0, 0, 0, 1);
}

public function translate 
    from (v is Vec3) 
    to Mat4 
{
    translate(v.x, v.y, v.z);
}

public function scale 
    from (v is Vec3) 
    to Mat4 
{
    scale(v.x, v.y, v.z);
}

public function scale 
    from (x is Number, y is Number, z is Number) 
    to Mat4 
{
    if (x == 1 and y == 1 and z == 1) then Mat4.<<1>> 
	else if (x == 0 and y == 0 and z == 0) then Mat4.<<0>> 
	    else
		matrix(x, 0, 0, 0,
		       0, y, 0, 0,
		       0, 0, z, 0,
		       0, 0, 0, 1);
}

public function rotate 
    from (rx is Number, ry is Number, rz is Number) 
    to Mat4 
{
    if (rx == 0 and ry == 0 and rz == 0) {
	return Mat4.<<1>>;
    }
    quat(rx, ry, rz).toMat4();
}

public function rotate
    from (degrees is Number, axis is Vec3) 
    to Mat4 
{
    rotateNormalAxis(degrees, axis.normalize());
}

public function rotateNormalAxis
    from (degrees is Number, axis is Vec3) 
    to Mat4 
{
    if (degrees == 0) then Mat4.<<1>> else Quat(degrees, axis).toMat4();
}

