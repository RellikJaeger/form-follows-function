package f3.math;
import java.lang.Math;
import java.lang.Math.*;
import f3.math.LinearMath.*;
import f3.util.Bits.*;

public const <<1>> = Quat { w: 1.0 };
public const <<0>> = Quat { };

// mostly from ardor3d

public class Quat is Tuple4, Mat4.Transformable of Quat
{
    public function blend from (target is Quat, w is Number) to Quat
    {
        this * ((this.inverse() * target).pow(w));
    }

    public function pow from (exponent is Number) to Quat 
    {
        if (Math.abs(this.w) > .9999) {   
            return this;
        }   
   
        // Extract the half angle alpha (alpha = theta/2)   
   
        const alpha = Math.acos(this.w);   
   
        // Compute new alpha value   
   
        const newAlpha = alpha * exponent;   
   
        // Compute new w value   

        const w = Math.cos(newAlpha);   
   
        // Compute new xyz values   
   
        const mult = sin(newAlpha) / sin(alpha);   

        return new Quat(x *mult, y*mult, z*mult, w);
    }

    public function toAngleAxis to (Number, Vec3) {
        const sqrLength = x*x + y*y + z*z;
        if (Math.abs(sqrLength) <= LinearMath.EPSILON) { // length is ~0
	   f3.lang.Both.both(0.0, Vec3.<<0>>)
        } else {
            const angle = 2.0 * Math.acos(w);
	    const i is Number = 1.0/Math.sqrt(sqrLength);
	    f3.lang.Both.both(Math.toDegrees(angle) as Number, new Vec3(x*i, y*i, z*i));
        }
    }

    override function premultiply from (m is Mat4) to Quat 
    {
	const aa = toAngleAxis();
	Quat(aa.former, m * aa.latter);
    }

    public function mul from (mat is Mat4) to Mat4
    {
        toMat4() * mat
    }


    override public function mul 
	from (n is Number) 
	to Quat 
    {
	Quat {
	    x: x * n;
	    y: y * n;
	    z: z * n;
	    w: w * n;
	}
    }

    public function mul 
	from (v is Vec3) 
	to Vec3 
    {
        const x = this.w * this.w * v.x + 2 * this.y * this.w * v.z - 2 * this.z * this.w
            * v.y + this.x * this.x * v.x + 2 * this.y * this.x * v.y + 2 * this.z
            * this.x * v.z - this.z * this.z * v.x - this.y * this.y * v.x;
        const y = 2 * this.x * this.y * v.x + this.y * this.y * v.y + 2 * this.z * this.y
            * v.z + 2 * this.w * this.z * v.x - this.z * this.z * v.y + this.w * this.w
            * v.y - 2 * this.x * this.w * v.z - this.x * this.x * v.y;
        const z = 2 * this.x * this.z * v.x + 2 * this.y * this.z * v.y + this.z * this.z
            * v.z - 2 * this.w * this.y * v.x - this.y * this.y * v.z + 2 * this.w
            * this.x * v.y - this.x * this.x * v.z + this.w * this.w * v.z;
	Vec3 {
	    x: x;
	    y: y;
	    z: z;
	}
    }

    public function mul 
	from (q is Quat) to Quat 
    {
	const qx = q.x;
	const qy = q.y;
	const qz = q.z;
	const qw = q.w;
        const x = this.x * qw + this.y * qz - this.z * qy + this.w * qx;
        const y = -this.x * qz + this.y * qw + this.z * qx + this.w * qy;
        const z = this.x * qy - this.y * qx + this.z * qw + this.w * qz;
        const w = -this.x * qx - this.y * qy - this.z * qz + this.w * qw;
	Quat {
	    x: x;
	    y: y;
	    z: z;
	    w: w;
	}
    }

    public function normalize from () to Quat
    {
	const lenSq = lengthSquared();
	if (lenSq <> 1 and lenSq <> 0) then mul(1/Math.sqrt(lenSq)) else this
    }

    public function lengthSquared from () to Number 
    {
	x*x + 
        y*y +
	z*z +
	w*w   
    }

    public function length from () to Number
    {
	Math.sqrt(lengthSquared());
    }

    public function inverse to Quat {
	const scale = 1.0 / lengthSquared();
	Quat {
	    x: -x*scale;
	    y: -y*scale;
	    z: -z*scale;
	    w: w*scale;
	}
    }

    public function conjugate to Quat {
	Quat {
	    x: -x;
	    y: -y;
	    z: -z;
	    w: w;
	}
    }
    
    public function dot from (q is Quat) to Number  
    {
	x * q.x +
	y * q.y +
	z * q.z +
	w * q.w;
    }

    public function negate to Quat
    {
        new Quat(-x, -y, -z, -w);
    }

    public function slerp from (b0 is Quat, t is Number) to Quat
    {
	var cosHalfTheta = dot(b0);
	// if qa=qb or qa=-qb then theta = 0 and we can return qa
	if (Math.abs(cosHalfTheta) >= 1.0) {
            return this;
	}
        const b = if (cosHalfTheta < 0) then { cosHalfTheta = -cosHalfTheta; -b0 } else b0;
        var x is Number;
        var y is Number;
        var z is Number;
        var w is Number;
	// Calculate temporary values.
	const halfTheta = Math.acos(cosHalfTheta) as Number;
        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta*cosHalfTheta) as Number;
	// if theta = 180 degrees then result is not fully defined
	// we could rotate around any axis normal to qa or qb
	if (Math.abs(sinHalfTheta) < 0.001) {
            x = (this.x * 0.5 + b.x * 0.5);
            y = (this.y * 0.5 + b.y * 0.5);
            z = (this.z * 0.5 + b.z * 0.5);
            w = (this.w * 0.5 + b.w * 0.5);
            return new Quat(x, y, z, w);
	}
	const ratioA = (Math.sin((1 - t) * halfTheta) / sinHalfTheta) as Number;
        const ratioB = (Math.sin(t * halfTheta) / sinHalfTheta) as Number; 
	//calculate Quaternion.
	x = (this.x * ratioA + b.x * ratioB);
	y = (this.y * ratioA + b.y * ratioB);
	z = (this.z * ratioA + b.z * ratioB);
	w = (this.w * ratioA + b.w * ratioB);
        return new Quat(x, y, z, w);
    }

    public function toAngles(order is Integer) to Tuple3 
    {
	EulFromMatrix(toMat4(), order);
    }

    public function toAngles to Tuple3 
    {
        const sqw = w * w;
        const sqx = x * x;
        const sqy = y * y;
        const sqz = z * z;
        const unit = sqx + sqy + sqz + sqw; // if normalized is one, otherwise
        if (unit == 0) {
            return Tuple3.<<0>>
        }
        // is correction factor
        const test = x * y + z * w;
	var rx is Number;
	var ry is Number;
	var rz is Number;
        if (test > 0.499 * unit) { // singularity at north pole
            ry = 2 * Math.atan2(x, w);
	    rz = Math.PI/2.0;
	    rx = 0.0;
        } else if (test < -0.499 * unit) { // singularity at south pole
	    ry = -2 * Math.atan2(x, w);
	    rz = -Math.PI/2.0;
	    rx = 0.0;
        } else {
            ry = Math.atan2(2 * y * w - 2 * x * z, sqx - sqy - sqz + sqw);
	    rz = Math.asin(2 * test / unit);
	    rx = Math.atan2(2 * x * w - 2 * y * z, -sqx + sqy - sqz + sqw);
        }
	Tuple3 {
	    x: toDegrees(rx);
	    y: toDegrees(ry);
	    z: toDegrees(rz);
	}
    }

    public function toMat4 to Mat4 
    {
        if (this == <<1>>) then Mat4.<<1>> else toMat4(Point3.<<0>>);
    }   

    public function toMat4 from (t is Tuple3) to Mat4 
    {
	const norm = lengthSquared();
        const s = if (norm > 0.0) then 2.0 / norm else 0.0;

        // compute xs/ys/zs first to save 6 multiplications, since xs/ys/zs                        
        // will be used 2-4 times each.                                                            
        const xs = x * s;
        const ys = y * s;
        const zs = z * s;
        const xx = x * xs;
        const xy = x * ys;
        const xz = x * zs;
        const xw = w * xs;
        const yy = y * ys;
        const yz = y * zs;
        const yw = w * ys;
        const zz = z * zs;
        const zw = w * zs;

        // using s=2/norm (instead of 1/norm) saves 9 multiplications by 2 here                    
	LinearMath.matrix(1.0 - (yy + zz), xy - zw, xz + yw, t.x,
			  xy + zw, 1.0 - (xx + zz), yz - xw, t.y,
			  xz - yw, yz + xw, 1.0 - (xx + yy), t.z,
			  0, 0, 0, 1);
    }
}

public function lookAt 
    from (dir is Vec3,
	  up is Vec3) 
    to Quat
{
    const z = dir.normalize();
    const y = up.normalize();
    const x = z.cross(y).normalize();
    Quat(x, y, z)
}

public function Quat from (x is Vec3, y is Vec3, z is Vec3) to Quat 
{
    Quat(x.x, y.x, z.x,
	 x.y, y.y, z.y,
	 x.z, y.z, z.z)
}

public function Quat from (degrees is Number, axis0 is Vec3) to Quat 
{
    if (axis0 == Vec3.<<0>>) {
	return <<1>>;
    }
    const angle = Math.toRadians(degrees);
    const axis = axis0.normalize();
    const halfAngle = 0.5 * angle;
    const sin = Math.sin(halfAngle);
    const w = Math.cos(halfAngle);
    const x = sin * axis.x;
    const y = sin * axis.y;
    const z = sin * axis.z;
    Quat {
	x: x;
	y: y;
	z: z;
	w: w;
    }
}
/*
public function Quat from (eulerAngles is Tuple3) to Quat {
    Quat(eulerAngles.x,
	 eulerAngles.y,
	 eulerAngles.z)
}

public function Quat from (rx is Number, ry is Number, rz is Number) to Quat 
{
    const heading = Math.toRadians(ry);
    const attitude = Math.toRadians(rz);
    const bank = Math.toRadians(rx);
    var angle = heading * 0.5;
    const sinHeading = Math.sin(angle);
    const cosHeading = Math.cos(angle);
    angle = attitude * 0.5;
    const sinAttitude = Math.sin(angle);
    const cosAttitude = Math.cos(angle);
    angle = bank * 0.5;
    const sinBank = Math.sin(angle);
    const cosBank = Math.cos(angle);
    
    // variables used to reduce multiplication calls.
    const cosHeadingXcosAttitude = cosHeading * cosAttitude;
    const sinHeadingXsinAttitude = sinHeading * sinAttitude;
    const cosHeadingXsinAttitude = cosHeading * sinAttitude;
    const sinHeadingXcosAttitude = sinHeading * cosAttitude;
    
    var w = (cosHeadingXcosAttitude * cosBank - sinHeadingXsinAttitude * sinBank);
    var x = (cosHeadingXcosAttitude * sinBank + sinHeadingXsinAttitude * cosBank);
    var y = (sinHeadingXcosAttitude * cosBank + cosHeadingXsinAttitude * sinBank);
    var z = (cosHeadingXsinAttitude * cosBank - sinHeadingXcosAttitude * sinBank);

    const mag = Math.sqrt(w*w+x*x+y*y+z*z);
    const n = 1.0 / mag;

    w *= n;
    x *= n;
    y *= n;
    z *= n;

    Quat {
	x: x;
	y: y;
	z: z;
	w: w;
    }
}
*/

public function Quat from (m is Mat4) to Quat 
{
    Quat(m.xx, m.xy, m.xz, 
	 m.yx, m.yy, m.yz, 
	 m.zx, m.zy, m.zz);
}

public function Quat 
    from (m00 is Number,
	  m01 is Number,
	  m02 is Number,
	  m10 is Number,
	  m11 is Number,
	  m12 is Number,
	  m20 is Number,
	  m21 is Number,
	  m22 is Number) 
    to Quat
{

    // Uses the Graphics Gems code, from
    // ftp://ftp.cis.upenn.edu/pub/graphics/shoemake/quatut.ps.Z
    // *NOT* the "Matrix and Quaternions FAQ", which has errors!
    // the trace is the sum of the diagonal elements; see
    // http://mathworld.wolfram.com/MatrixTrace.html
    const t = m00 + m11 + m22;
    // we protect the division by s by ensuring that s>=1
    var x is Number;
    var y is Number;
    var z is Number;
    var w is Number;
    if (t >= 0) { // |w| >= .5
	var s = Math.sqrt(t + 1); // |s|>=1 ...
	w = 0.5 * s;
	s = 0.5 / s; // so this division isn't bad
	x = (m21 - m12) * s;
	y = (m02 - m20) * s;
	z = (m10 - m01) * s;
    } else if ((m00 > m11) and (m00 > m22)) {
	var s = Math.sqrt(1.0 + m00 - m11 - m22); // |s|>=1
	x = s * 0.5; // |x| >= .5
	s = 0.5 / s;
	y = (m10 + m01) * s;
	z = (m02 + m20) * s;
	w = (m21 - m12) * s;
    } else if (m11 > m22) {
	var s = Math.sqrt(1.0 + m11 - m00 - m22); // |s|>=1
	y = s * 0.5; // |y| >= .5
	s = 0.5 / s;
	x = (m10 + m01) * s;
	z = (m21 + m12) * s;
	w = (m02 - m20) * s;
    } else {
	var s = Math.sqrt(1.0 + m22 - m00 - m11); // |s|>=1
	z = s * 0.5; // |z| >= .5
	s = 0.5 / s;
	x = (m02 + m20) * s;
	y = (m21 + m12) * s;
	w = (m10 - m01) * s;
    }
    Quat {
	x: x;
	y: y;
	z: z;
	w: w;
    }
}


//----------------------------------------------------------------------
// Full euler angle decomposition into any angle order
//
// http://tog.acm.org/GraphicsGems//gemsiv/euler_angle/

// Order type constants, constructors, extractors //
// There are 24 possible conventions, designated by:    //
//	  o EulAxI = axis used initially		    //
//	  o EulPar = parity of axis permutation		    //
//	  o EulRep = repetition of initial axis as last	    //
//	  o EulFrm = frame from which axes are taken	    //
// Axes I,J,K will be a permutation of X,Y,Z.	    //
// Axis H will be either I or K, depending on EulRep.   //
// Frame S takes axes from initial static frame.	    //
// If ord = (AxI=X, Par=Even, Rep=No, Frm=S), then	    //
// {a,b,c,ord} means Rz(c)Ry(b)Rx(a), where Rz(c)v	    //
// rotates v around Z by c radians.			    //

const EulFrmS = 0;
const EulFrmR = 1;
function EulFrm from (ord is Integer) to Integer { bitAnd(ord, 1) }
const EulRepNo = 0;
const EulRepYes = 1;
function EulRep from (ord is Integer) to Integer { bitAnd(shiftRight(ord, 1), 1) }
const EulParEven = 0;
const EulParOdd = 1;
function EulPar from (ord is Integer) to Integer { bitAnd(shiftRight(ord, 2), 1) }
const EulSafe = [0, 1, 2, 0];
const EulNext = [1, 2, 0, 1];
function EulAxI from (ord is Integer) to Integer { EulSafe[bitAnd(shiftRight(ord,3), 3)] }
function EulAxJ from (ord is Integer) to Integer {
    EulNext[EulAxI(ord)+(if (EulPar(ord)==EulParOdd) then 1 else 0)]
}
function EulAxK from (ord is Integer) to Integer {
    EulNext[EulAxI(ord)+(if (EulPar(ord)<>EulParOdd) then 1 else 0)]
}
function EulAxH from (ord is Integer) to Integer {
    if (EulRep(ord)==EulRepNo) then EulAxK(ord) else EulAxI(ord);
}
/* EulOrd creates an order value between 0 and 23 from 4-tuple choices. */
function EulOrd from (i is Integer, p is Integer, r is Integer,  f is Integer) to Integer { 
    var j = shiftLeft(i, 1) + p;
    j = shiftLeft(j, 1) + r;
    j = shiftLeft(j, 1) + f;
    return j;
}
/* Static axes */
const EulOrdXYZs = EulOrd(0,EulParEven,EulRepNo,EulFrmS);
const EulOrdXYXs = EulOrd(0,EulParEven,EulRepYes,EulFrmS);
const EulOrdXZYs = EulOrd(0,EulParOdd,EulRepNo,EulFrmS);
const EulOrdXZXs = EulOrd(0,EulParOdd,EulRepYes,EulFrmS);
const EulOrdYZXs = EulOrd(1,EulParEven,EulRepNo,EulFrmS);
const EulOrdYZYs = EulOrd(1,EulParEven,EulRepYes,EulFrmS);
const EulOrdYXZs = EulOrd(1,EulParOdd,EulRepNo,EulFrmS);
const EulOrdYXYs = EulOrd(1,EulParOdd,EulRepYes,EulFrmS);
const EulOrdZXYs = EulOrd(2,EulParEven,EulRepNo,EulFrmS);
const EulOrdZXZs = EulOrd(2,EulParEven,EulRepYes,EulFrmS);
const EulOrdZYXs = EulOrd(2,EulParOdd,EulRepNo,EulFrmS);
const EulOrdZYZs = EulOrd(2,EulParOdd,EulRepYes,EulFrmS);
/* Rotating axes */
const EulOrdZYXr = EulOrd(0,EulParEven,EulRepNo,EulFrmR);
const EulOrdXYXr = EulOrd(0,EulParEven,EulRepYes,EulFrmR);
const EulOrdYZXr = EulOrd(0,EulParOdd,EulRepNo,EulFrmR);
const EulOrdXZXr = EulOrd(0,EulParOdd,EulRepYes,EulFrmR);
const EulOrdXZYr = EulOrd(1,EulParEven,EulRepNo,EulFrmR);
const EulOrdYZYr = EulOrd(1,EulParEven,EulRepYes,EulFrmR);
const EulOrdZXYr = EulOrd(1,EulParOdd,EulRepNo,EulFrmR);
const EulOrdYXYr = EulOrd(1,EulParOdd,EulRepYes,EulFrmR);
const EulOrdYXZr = EulOrd(2,EulParEven,EulRepNo,EulFrmR);
const EulOrdZXZr = EulOrd(2,EulParEven,EulRepYes,EulFrmR);
const EulOrdXYZr = EulOrd(2,EulParOdd,EulRepNo,EulFrmR);
const EulOrdZYZr = EulOrd(2,EulParOdd,EulRepYes,EulFrmR);

public const EULER_XYZ = EulOrdXYZs;
public const EULER_XZY = EulOrdXZYs;
public const EULER_YZX = EulOrdYZXs;
public const EULER_YXZ = EulOrdYXZs;
public const EULER_ZXY = EulOrdZXYs;
public const EULER_ZYX = EulOrdZYXs;

// Convert matrix to Euler angles (in radians).
function EulFromMatrix from (M is Mat4, order is Integer) to Tuple3 
{
    const i = EulAxI(order);
    const j = EulAxJ(order);
    const k = EulAxK(order);
    const h = EulAxH(order);
    const n = EulPar(order);
    const s = EulRep(order);
    const f = EulFrm(order);
    var rx is Number;
    var ry is Number;
    var rz is Number;
    if (s == EulRepYes) {
	const sy = Math.sqrt(M.get(i, j)*M.get(i, j) + M.get(i, k)*M.get(i, k)) as Number;
	if (sy > 16*EPSILON) {
	    rx = Math.atan2(M.get(i, j), M.get(i, k)) as Number;
	    ry = Math.atan2(sy, M.get(i, i)) as Number;
	    rz = Math.atan2(M.get(j, i), -M.get(k, i)) as Number;
	} else {
	    rx = Math.atan2(-M.get(j, k), M.get(j, j)) as Number;
	    ry = Math.atan2(sy, M.get(i, i)) as Number;
	    rz = 0;
	}
    } else {
	const cy = Math.sqrt(M.get(i, i)*M.get(i, i) + M.get(j, i)*M.get(j, i)) as Number;
	if (cy > 16*LinearMath.EPSILON) {
	    rx = Math.atan2(M.get(k, j), M.get(k, k)) as Number;
	    ry = Math.atan2(-M.get(k, i), cy) as Number;
	    rz = Math.atan2(M.get(j, i), M.get(i, i)) as Number;
	} else {
	    rx = Math.atan2(-M.get(j, k), M.get(j, j)) as Number;
	    ry = Math.atan2(-M.get(k, i), cy) as Number;
	    rz = 0;
	}
    }
    if (n == EulParOdd) { rx = -rx; ry = -ry; rz = -rz }
    if (f == EulFrmR) { const t = rx; rx = rz; rz = t }
    
    Tuple3 {
	x: Math.toDegrees(rx);
	y: Math.toDegrees(ry);
	z: Math.toDegrees(rz);
    }

}



public const TYPE_INFO =
       org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(<<0>>);

