package f3.math;
import java.lang.Math;

public const <<0>> = Point3 {x: 0.0, y: 0.0, z: 0.0};
public const <<1>> = Point3 {x: 1.0, y: 1.0, z: 1.0};

public class Point3 is Tuple3
{
    public function dot from (vector is Vec3) to Number 
    {
	x*vector.x + 
        y*vector.y +
	z*vector.z
    }

    public function add from (vector is Vec3) to Point3
    {
	Point3 
	{ 
	    x: x + vector.x;
	    y: y + vector.y;
	    z: z + vector.z;
	} 
    }

    public function add from (vector is Tuple3) to Point3
    {
	Point3 
	{ 
	    x: x + vector.x;
	    y: y + vector.y;
	    z: z + vector.z;
	} 
    }

    public function sub from (vector is Vec3) to Point3
    {
	Point3 
	{ 
	    x: x - vector.x;
	    y: y - vector.y;
	    z: z - vector.z;
	} 
    }

    public function sub from (vector is Tuple3) to Point3
    {
	Point3 
	{ 
	    x: x - vector.x;
	    y: y - vector.y;
	    z: z - vector.z;
	} 
    }

    public function sub from (point is Point3) to Vec3
    {
	Vec3 
	{ 
	    x: x - point.x;
	    y: y - point.y;
	    z: z - point.z;
	} 
    }

    public override function negate from () to Point3
    {
	Point3 
	{ 
	    x: -x;
	    y: -y;
	    z: -z;
	} 
    }

    public override function * from (scale is Number) to Point3 
    {   
    	if scale == 0 then <<0>> else if scale == 1 then this else
	Point3 { 
	    x: x*scale;
	    y: y*scale;
	    z: z*scale;
	}
    }

    public override function / from (scale is Number) to Point3 
    {   
	Point3 { 
	    x: x/scale;
	    y: y/scale;
	    z: z/scale;
	}
    }

    override public function mul from (tuple is Tuple3) to Point3 
    {
        Point3 {
            x: x * tuple.x;
            y: y * tuple.y;
            z: z * tuple.z;
        }
    }   

    public function div from (tuple is Tuple3) to Point3 
    {
        Point3 {
            x: x / tuple.x;
            y: y / tuple.y;
            z: z / tuple.z;
        }
    }   

    public function min from (point is Point3) to Point3 
    {
	if (point == this) point else new Point3 (Math.min(x, point.x), Math.min(y, point.y), Math.min(z, point.z))
    }

    public function max from (point is Point3) to Point3 
    {
	if (point == this) point else new Point3 (Math.max(x, point.x), Math.max(y, point.y), Math.max(z, point.z))
    }

    public function xy to Point2 
    {
	new Point2(x, y);
    }
    
    public function lerp from (t is Number, target is Point3) to Point3 
    {
	const inv_t = 1 - t;
	Point3 
        { 
	    x: inv_t*x + t*target.x;
	    y: inv_t*y + t*target.y; 
	    z: inv_t*z + t*target.z;
        }
    }

    public function translate from (tx is Number, ty is Number, tz is Number) to Point3
    {
        new Point3(this.x+tx, this.y+ty, this.z+tz)
    }

    override function toString from () to String 
    {
	"\{ x: {x}, y: {y}, z: {z} \}"
    }
}

public static def TYPE_INFO =
       org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(<<0>>);