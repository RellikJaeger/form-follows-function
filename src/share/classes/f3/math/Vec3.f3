package f3.math;
import java.lang.Math;
import f3.math.LinearMath.*;

public static const <<0>> = Vec3 {x: 0.0, y: 0.0, z: 0.0};
public static const <<1>> = Vec3 {x: 1.0, y: 1.0, z: 1.0};

public static const X_AXIS = Vec3 {x: 1.0, y: 0.0, z: 0.0};
public static const Y_AXIS = Vec3 {x: 0.0, y: 1.0, z: 0.0};
public static const Z_AXIS = Vec3 {x: 0.0, y: 0.0, z: 1.0};

public const ZERO = <<0>>;
public const ONE = <<1>>;

public class Buffer 
{
    var x is Number;
    var y is Number;
    var z is Number;

    public function toVec3 to Vec3 
    {
	Vec3 {
	    x: x;
	    y: y;
	    z: z;
	}
    }

    public function dot from (b is Buffer) to Number {
	x * b.x + y * b.y + z * b.z;
    }

    public function add from (b is Buffer) to Buffer {
	x += b.x;  y += b.y;   z +=  b.z;
	return this
    }

    public function dot from (b is Vec3) to Number 
    {
	x * b.x + y * b.y + z * b.z;
    }

    public function add from (b is Vec3) to Buffer 
    {
	x += b.x;  y += b.y;   z +=  b.z;
	return this
    }

    public function mul from (n is Number) to Buffer 
    {
	x *= n;  y *= n;   z * n;
	return this
    }

    public function cross from (v is Buffer) to Buffer {
	const x = this.x;
	const y = this.y;
	const z = this.z;
	this.x = y*v.z - z*v.y;
	this.y = z*v.x - x*v.z;
	this.z = x*v.y - y*v.x;
	return this;
    }

    public function cross from (v is Vec3) to Buffer {
	const x = this.x;
	const y = this.y;
	const z = this.z;
	this.x = y*v.z - z*v.y;
	this.y = z*v.x - x*v.z;
	this.z = x*v.y - y*v.x;
	return this;
    }

    public function length to Number {
	Math.sqrt(x*x+y*y+z*z);
    }
}

public class Vec3 is Tuple3
{
    public function +
	from (p is Point3) 
	to Point3 
    {
	p + this
    }

    public function dot
	from (v is Tuple3) 
	to Number 
    {
	x*v.x + 
        y*v.y +
	z*v.z
    }

    public function cross 
	from (v is Tuple3) 
	to Vec3 
    {
	Vec3 
	{
	    x: y*v.z - z*v.y;
	    y: z*v.x - x*v.z;
	    z: x*v.y - y*v.x;
	}
    }

    public function translate
	from (dx is Number,
	      dy is Number,
	      dz is Number) 
	to Vec3
    {
	Vec3 
	{ 
	    x: x + dx;
	    y: y + dy;
	    z: z + dz;
	} 
    }

    public function +
	from (v is Number[])
	to Vec3
    {
	Vec3 
	{ 
	    x: x + v[0]
	    y: y + v[1]
	    z: z + v[2]
	} 
    }

    public function +
	from (v is Vec3) 
	to Vec3
    {
	Vec3 
	{ 
	    x: x + v.x;
	    y: y + v.y;
	    z: z + v.z;
	} 
    }

    public function -
	from (v is Vec3) 
	to Vec3
    {
	Vec3 
	{ 
	    x: x - v.x;
	    y: y - v.y;
	    z: z - v.z;
	} 
    }

    override public function negate 
	to Vec3
    {
	Vec3 
	{ 
	    x: -x;
	    y: -y;
	    z: -z;
	} 
    }

    public function - to Vec3
    {
	Vec3 
	{ 
	    x: -x;
	    y: -y;
	    z: -z;
	} 
    }

    override public function * from (n is Number) to Vec3
    {
	if (n == 0) then <<0>> else if (n == 1) then this else 
	Vec3 
        { 
	    x: x*n;
	    y: y*n;
	    z: z*n;
	} 
    }

    public function / from (n is Number) to Vec3
    {
	this * (1/n)
    }

    public function map from (f is function from Number to Number) to Vec3 
    {
	new Vec3(f(x), f(y), f(z))
    }

    public function normalize to Vec3 
    {
	const lenSq = lengthSquared();
	if (lenSq <> 1 and lenSq <> 0) then this * (1/Math.sqrt(lenSq) as Number) else this
    }

    public function projector to Mat4 
    {
	matrix(x * x, y * x, z * x, 0,
	       x * y, y * y, z * y, 0,
	       x * z, y * z, z * z, 0,
	       0    , 0    , 0    , 1);
    }

    public function project from (v is Tuple3) to Vec3 
    {
	this * this.dot(v);
    }

    public function lerp
	from (t is Number, 
	      target is Vec3) 
	to Vec3 
    {
	const inv_t = 1 - t;
	Vec3 
        { 
	    x: inv_t*x + t*target.x;
	    y: inv_t*y + t*target.y; 
	    z: inv_t*z + t*target.z;
        }
    }

    override function toString to String 
    {
	"\{ x: {x}, y: {y}, z: {z} \}"
    }

    public function <<,>> from (w is Number) to Vec4 
    {
	xyzw(w)
    }

    public function xy to Vec2
    {
	new Vec2(x, y);
    }

    public function xyzw 
	from (w is Number) 
	to Vec4
    {
	Vec4 
	{
	    x: x;
	    y: y;
	    z: z;
	    w: w;
	}
    }

    public function rotate(degrees is Number) to Mat4 
    {
	LinearMath.rotate(degrees, this);
    }

    public function rotationTo 
	from (v is Vec3)
	to Quat 
    {
	rotationTo(v, null);
    }

    public function rotationTo 
	from (v is Vec3, preferredAxis is Vec3) 
	to Quat 
    {
	const s = normalize();
	const t = v.normalize();
	const factor = s.length() * t.length();
	if (Math.abs(factor) > LinearMath.EPSILON) {
	    const dot = s.dot(t) / factor;
	    const theta = Math.acos(Math.max(-1, Math.min(dot, 1.0)));
	    var pivot = s.cross(t);
            println("rotation to {s} {t} dot {dot}, theta {theta} pivot {pivot}"); 
	    if (pivot.length() > LinearMath.EPSILON) {
		if (dot < 0.0) {
                    // Vectors parallel and opposite direction, therefore a rotation
                    // of 180 degrees about any vector perpendicular to this vector
                    // will rotate vector a onto vector b.
		    if (preferredAxis == null) {
			// The following guarantees the dot-product will be 0.0.
                        var dominantIndex is Integer;
                        if (Math.abs(s.x) > Math.abs(s.y)) {
                            if (Math.abs(s.x) > Math.abs(s.z)) {
                                dominantIndex = 0;
                            } else {
                                dominantIndex = 2;
                            }
                        } else {
                            if (Math.abs(s.y) > Math.abs(s.z)) {
                                dominantIndex = 1;
                            } else {
                                dominantIndex = 2;
                            }
                        }
                        var p = [0.0, 0.0, 0.0];
                        p[dominantIndex] = -s.get((dominantIndex+1) mod 3);
                        p[(dominantIndex+1) mod 3] = s.get(dominantIndex);
                        p[(dominantIndex+2) mod 3] = 0;
                        pivot = Vec3 { x: p[0], y: p[1], z: p[2] };
                    } else {
                        // Use the preferred axis
                        pivot = preferredAxis;
                    }
                }
                Quat.Quat(Math.toDegrees(theta), pivot);
	    } else Quat.<<1>>;
	} else Quat.<<1>>;
    }
}

function run 
{
    const v = <<1>>;
    println(-v);
}


public static def TYPE_INFO = org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(<<0>>);
