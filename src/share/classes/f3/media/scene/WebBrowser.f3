package f3.media.scene;
import f3.math.Interval;

public class WebBrowser is WebBrowserNode 
{
    var urlInvalid = true;
    public var url is String on invalidate {
	urlInvalid = true;
    }
    
    public readonly var videoClips is VideoClip[] = bind foreach (v in video) VideoClip {
        browser: this;
        media: v;
    };

    public readonly var audioClips is AudioClip[] = bind foreach (v in audio) AudioClip {
        browser: this;
        media: v;
    };

    var video is AbstractWebBrowser.Video[];
    var audio is AbstractWebBrowser.Audio[];

    override function update {
	super.update();
	if (urlInvalid) {
	    urlInvalid = false;
	    tex.setURL(url);
	    super.update();
	}
        video = foreach (v in tex.getVideo()) v;
        audio = foreach (v in tex.getAudio()) v;
    }
}

abstract public class MediaClip is TimeNode {
    override var id = bind media.getId();
    public const browser is WebBrowser;
    public const media is AbstractWebBrowser.Media;
    var dur is Number = 0;
    override var contentBounds = bind Interval { end: 1s * dur }

    override var localTime on replace {
        if (pausedInScene and isPlaying()) {
            media.pause();
            media.setCurrentTime(localTime.toMillis() / 1000.0);
        }
    }

    override protected function update 
	from (sceneTime is Duration) 
	to () 
    {
        dur = media.getDuration();
        super.update(sceneTime);
        if (pausedInScene or not isPlaying()) {
            media.pause();
        } else {
            media.play();
        }
    }
}

public class VideoClip is MediaClip {
}

public class AudioClip is MediaClip {
}