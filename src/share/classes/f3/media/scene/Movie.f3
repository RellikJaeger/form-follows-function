package f3.media.scene;
import f3.math.*;

public class Movie is Shape2D.MeshNode2D, AbstractTexture {
    public var url is String;
    public const movieLoader is MovieLoader = the MovieLoader;
    public const pathFactory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public readonly var movie is AbstractMovie = bind movieLoader.loadMovie(url);
    public var tex is AbstractTexture;
    public var paused is Boolean = false;
    public readonly var position is Duration = 0s;
    public readonly var duration = bind 1ms * movie.getEndPosition();
    var lastUpdate is Long;

    public function setPosition from (pos is Duration) to ()
    {
        if (paused) position = pos;
        movie.setPosition(pos.toMillis() as Long);
        needsDraw = true;
    }

    function getMovieIfLoaded to AbstractMovie { tex as AbstractMovie }

    var needsDraw = true;
    var pos is Long;
    var lastPos is Long = -1;
    var countDown is Integer = 5;

    public function updateTexture to Boolean {
	needsDraw = countDown > 0;
        if (needsDraw) {
            countDown--;
        }
        lastPos = pos;
	return needsDraw;
    }

    override function update to () 
    {
        if (movieLoader == null) {
            throw new java.lang.RuntimeException("No movie loader");
        }
        const longPos = position.toMillis() as Long;
	if (tex <> movie) {
	    tex = movie;
	    movie.setVolume(volume);
	    movie.setRate(rate);
            movie.setPosition(longPos);
            movie.play();
	}
	if (paused) {
	    pos = movie.pause();
            movie.setPosition(longPos);
	} else {
            pos = movie.getPosition();
            movie.play();
	}
	movie.update();
        pos = movie.getPosition();
        //if (pos <> lastPos) {
        //     println("pos={pos}, lastPos={lastPos}");
        //}
        if (not needsDraw) {
            needsDraw = (lastPos <> pos);
            if (needsDraw) {
                countDown = 60;
            }
        }
	width = movie.getWidth();
	height = movie.getHeight();
	if (not paused and pos <> position.toMillis()) {
	    position = Duration.valueOf(pos);
	}
	//println("movie update {movie} {position} w={tex.getWidth()} h={tex.getHeight()} texId={getTextureId()}");
    }    
    override function getTextureId to Integer 
    {
        return tex.getTextureId();
    }
    public readonly var width is Integer;
    public readonly var height is Integer;
    override function getWidth to Integer { width }
    override function getHeight to Integer { height }
    override var path = bind Shape2D.rect(pathFactory, 
					  -width/2, -height/2, 
					  width, height);
    override var paint = bind Shape2D.TexturePaint { texture: getThis() }
    function getThis to Movie { this } // workaround for compiler bug with bound "this"    
    public var volume is Number = 1.0 on replace { getMovieIfLoaded().setVolume(volume) }
    public var rate is Number = 1.0 on replace { getMovieIfLoaded().setRate(volume) }

}

public class Clip is TimeNode {

    public var movie is Movie;

    override var contentBounds = bind Interval { end: movie.duration };
    
    override var localTime on replace {
        if (pausedInScene and isPlaying()) {
            movie.setPosition(localTime);
        }
    }

    var moviePaused = bind movie.paused on replace oldValue {
        if (isPlaying()) movie.setPosition(localTime);
    };

    override public function playFromStart to ()
    {
        playMovieFromStart();
    }

    public function playMovieFromStart to ()
    {
        movie.paused = true;
        movie.setPosition(0s);
        movie.update();
    }

    override protected function update 
	from (sceneTime is Duration) 
	to () 
    {
        super.update(sceneTime);
        movie.paused = pausedInScene or not isPlaying();
        movie.update();
        if (paused) {
            movie.setPosition(localTime);
        }
    }

    const disp1 = observeStart().subscribe(function from (_ is ()) to () 
                                           {
                                               movie.setPosition(localTime); 
                                               movie.paused = false;
                                           });

    const disp2 = observeCompletion().subscribe(function from (_ is ()) to () 
                                                {
                                                    movie.paused = true;
                                                });
}