package f3.media.scene;
import f3.util.*;
import f3.math.*;
import f3.lang.Ref;
import java.lang.Math;
//import org.f3.runtime.*;
import f3.media.scene.KeyFrame.Key;
import f3.media.scene.KeyFrame.Interpolator;

package var CHANNEL_DEBUG = java.lang.Boolean.getBoolean("f3.debug.anim.channel");

function binarySearch of a from (keys is (Key of a)[], t is Duration) to Integer 
{
    var low = 0;
    var high = keys.size() -1;
    while (low <= high) {
        const mid = low + Bits.unsignedShiftRight(high-low, 1);
        const midVal = keys[mid];
        if (midVal.position < t) {
            low = mid + 1;
        } else if (midVal.position > t) {
            high = mid - 1;
        } else {
            return mid;
        }
    }
    return -(low + 1);
}

public class Channel of a is TimeNode 
{
    public var targets is (Ref of a)[];
    public var keys is (Key of a)[];
    public const loopKeys is Boolean = yes;

    readonly var sortedKeys = bind KeyFrame.sortKeys(keys, loopKeys);

    override var contentBounds = bind getKeyBounds(sortedKeys);
    
    function getKeyBounds from (keys is (Key of a)[]) to Interval 
    {
	const k0 = keys[0];
	const k1 = keys[keys.size()-1];
	const r = Interval { start: k0.position, end: k1.position };
	return r;
    }

    public function createKey from (t is Duration, value is a, interpolator is Interpolator of a) to Key of a 
    {
        Key of a {
            position: t;
            value: value;
            interpolator: interpolator;
        }
    }

    public function setKey from (k is Key of a, t is Duration, value is a, i is Interpolator of a) to Key of a 
    {
        delete k from keys;
        const newKey = createKey(t, value, i);
        insert newKey into keys;
        return newKey;
    }

    public function setKey from (interpolator is Interpolator of a) to Key of a
    {
        println("set key {id} {localTime} => {interpolator}");
        setKey(localTime, interpolator)
    }

    public function deleteKeys from (first is Duration, last is Duration) to ()
    {
        keys = foreach (k in keys where k.position < first or k.position > last) k;
    }

    public function deleteKey to ()
    {
        const k = pickKey(localTime);
        println("delete key {id} local={localTime} cur={currentTime} => {k.position}");
        if (k <> null and k.position == currentTime) delete k from keys;
    }

    public function moveKey from (k is Key of a, delta is Duration) to Key of a
    {
        delete k from keys;
        const newKey = createKey(k.position + delta, k.value, k.interpolator);
        insert newKey into keys;
        return newKey;
    }

    public function setKey from (localTime is Duration, interpolator is Interpolator of a) to Key of a
    {
        const value = targets[0].get();
        const t = localTime;
        const k = pickKey(t);
        if (k <> null and k.position == t) {
            delete k from keys;
        }
        println("creating key: {id} {t} => {value}");
        const newKey = createKey(t, value, interpolator); 
        insert newKey into keys;
        return newKey;
    }

    override function markCompleted to ()
    {
        if (false and sceneBlendWeight == 1.0) {
            var k is Key of a;
            println("MARK COMPLETED {localTime}, {currentTime}");
            if (localTime < 0s) {
                k = sortedKeys[0];
            } else {
                k = sortedKeys[sortedKeys.size()-1];
            }
            if (k <> null) {
                for (p in targets) {
                    p.set(k.value);
                }
            }
        }
        super.markCompleted();
    }


    public function pickKeyIndex from (point is Duration) to Integer
    {
        var pos = binarySearch(sortedKeys, point);
        if (pos < 0) {
            pos = -(pos + 1);
        }
        pos = Math.min(sortedKeys.size()-1, pos);
    }

    public function pickKey from (point is Duration) to Key of a 
    {
        const pos = pickKeyIndex(point);
        const key = sortedKeys[pos];
        return key;
    }

    public function interpolate
	from (sceneTime is Duration, weight is Number, v is a) to a
    {
        const pos = localTime;
	const picked = pickKey(pos);
        if (debug) {
            println("parent.{id} / id={id} playing={playing} localTime={localTime} {picked} => picked={picked.position} {picked.value}");
        }
	var k1 is Key of a;
	var k2 is Key of a;
	if (picked.position < pos) {
	    k1 = picked;
	    k2 = picked.next;
	} else {
	    k1 = picked.prev;
	    k2 = picked;
	}
        if (debug) {
            println("k1={k1.position}, {k1.value}, k2={k2.position}, {k2.value}");
        }
	var t = 0.0;
	var k = k2;
	if (k1 == null) {
            t = 1.0;  
	} else if (k2 == null) {
            t = 0.0;
            k = k1;
	} else {
	    const dur = (k2.position - k1.position);
	    if (dur == 0s) {
		t = 0.0;
	    } else {
		t = (pos - k1.position) / dur;
	    }
	}
	// v + k.interpolate(t) * weight
        const result = k.interpolator.blend(if (v == null) then k.zero() else v, k.interpolate(t), weight);
	if (CHANNEL_DEBUG or debug) {
	    println("{id} interpolated {k.interpolator} {pos} to {result}");
	}
	return result;
    }
}

public class SpatialChannel is Channel of Number {
    public var target is Node;
}
