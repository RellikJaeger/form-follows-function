package f3.media.scene.meshdeform;
import f3.media.scene.*;
import f3.math.*;
import java.nio.*;
import java.util.concurrent.*;

public class SkinCluster is MeshDeformer {
    public var root is Node;
    public var sourceVertices is FloatBuffer;
    public var sourceNormals is FloatBuffer;
    public var targetVertices is FloatBuffer;
    public var targetNormals is FloatBuffer;
    public const joints is Node[];
    public const weights is Number[];
    public const bindPreMatrices is Mat4[];
    public const geomMatrix is Mat4;
    var bindShapeInverse is Mat4f = new Mat4f();
    var bindShape is Mat4f = new Mat4f();
    var jointMats is Mat4f[];
    var bindPreMats is Mat4f[];
    var combined is Mat4f[];
    var combinedInverseTranspose is Mat4f[];
    const sceneToLocal = new Mat4f();
    const lastWm is Mat4[];
    const tempMat = new Mat4f();
    const pos = new Vec3f();
    const norm = new Vec3f();
    const origPos = new Vec3f();
    const origNorm = new Vec3f();
    const temp1 = new Vec3f();
    const temp2 = new Vec3f();
    public override function apply from (m is MeshNode) to function from () to ()
    {
	root.toSceneTransform.inverse().getRows(sceneToLocal.data);
	if (jointMats == []) {
	    geomMatrix.getRows(bindShape.data);
	    bindShapeInverse.set(bindShape);
	    bindShapeInverse.invert();
	    jointMats = foreach (j in joints) new Mat4f();
	    bindPreMats = foreach (pm in bindPreMatrices) {
		const mat = new Mat4f();
		pm.getRows(mat.data);
		mat;
	    }
	    combined = foreach (j in bindPreMats) new Mat4f();
	    combinedInverseTranspose = foreach (j in bindPreMats) new Mat4f();
	}
	var dirty = false;
	if (lastWm == []) {
	    lastWm = foreach (j in joints) j.toSceneTransform;
	    dirty = true;
	} else {
	    for (j in [0..<joints.size()]) {
		const wm = lastWm[j];
		const jm = joints[j].toSceneTransform;
		if (jm <> wm) {
		    dirty = true;
		    lastWm[j] = jm;
		}
	    }
	}
	if (not dirty) {
	    return function from () to () {};
	}
	for (j in [0..<joints.size()]) {
	    const joint = joints[j];
	    const wm = joint.toSceneTransform;
	    const jm = jointMats[j];
	    wm.getRows(jm.data);
	    const cm = combined[j];
	    const cmi = combinedInverseTranspose[j];
	    const pm = bindPreMats[j];
	    if (bindShape <> null) {
		tempMat.mul(bindShapeInverse, sceneToLocal);
		cm.mul(tempMat, jm);
		tempMat.mul(cm, pm);
		cm.mul(tempMat, bindShape);
	    } else {
		tempMat.mul(sceneToLocal, jm);
		combined[j].mul(tempMat, pm);
	    }
	    cmi.set(cm); cmi.invert(); cmi.transpose();
	}
	var i = 0;
	while (i < weights.size()) {
	    const vert = (weights[i++] * 3) as Integer;
	    const numInfluences = weights[i++] as Integer;
	    pos.set(0, 0, 0);
	    norm.set(0, 0, 0);
	    origPos.set(sourceVertices.get(vert+0), 
			sourceVertices.get(vert+1), 
			sourceVertices.get(vert+2));
	    origNorm.set(sourceNormals.get(vert+0), 
			 sourceNormals.get(vert+1), 
			 sourceNormals.get(vert+2));
	    for (j in [0..<numInfluences]) {
		const joint = weights[i++] as Integer;
		const weight = weights[i++];
		combined[joint].xformPt(origPos, temp1);
		temp1.scale(weight);
		pos.add(temp1);
		combinedInverseTranspose[joint].xformDir(origNorm, temp2);
		temp2.scale(weight);
		norm.add(temp2);
	    }
	    norm.normalize();
	    targetVertices.put(vert+0, pos.x());
	    targetVertices.put(vert+1, pos.y());
	    targetVertices.put(vert+2, pos.z());
	    targetNormals.put(vert+0, norm.x());
	    targetNormals.put(vert+1, norm.y());
	    targetNormals.put(vert+2, norm.z());
	}
	return function () {}
    }
}
