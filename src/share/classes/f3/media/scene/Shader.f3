package f3.media.scene;
import f3.math.*;
import f3.lang.ObservableRef;
import f3.lang.Ref;

public interface Parameter of a is ObservableRef of a
{
    const name is String;
    //public override abstract function get to a;
    //public override abstract function set from (x is a) to ();
    public abstract function bindTo from (ref is Ref of a) to ();
    override function onReplace of b from (f is function from a to b) to function to () { null }
}

public abstract class Shader {
    public var id is String;
    public var uvMap is Integer[] = [];
    abstract public function apply from (mesh is AbstractMesh,
    					 sceneTransform is Mat4,
					 viewMatrix is Mat4,
					 projectionMatrix is Mat4) to ();
    abstract public function reset to ();

    public abstract function getParameter from (name is String) to Parameter of ?;
    public abstract function getParameters to (Parameter of ?)[];
    public abstract function setParameter from (name is String, value is Object) to ();
    public var isTransparent is Boolean;
}