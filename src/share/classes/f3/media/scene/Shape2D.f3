package f3.media.scene;
import java.lang.Math.sqrt;
import f3.math.*;
import f3.media.input.*;

public interface Path2DFactory {
    public abstract function createPath to Path2D;
}

// @TODO
public const WIND_NON_ZERO = 0;
public const WIND_EVEN_ODD = 1; 

public interface Path2D is Mat4.Transformable of Path2D {
    abstract public function moveTo from (x0 is Number, y0 is Number) to ();
    abstract public function lineTo from (x1 is Number, y1 is Number) to ();
    abstract public function quadTo from (cx1 is Number, cy1 is Number, 
					  x2 is Number, y2 is Number) to ();
    abstract public function cubicTo from (cx1 is Number, cy1 is Number, 
					   cx2 is Number, cy2 is Number,
					   x2 is Number, y2 is Number) to ();
    abstract public function closePath to ();
    abstract public function reset to ();
    abstract public function createMesh to AbstractMesh;
    abstract public function setTextureMatrix from (mat is Mat4) to ();
    abstract public function getBounds to Bounds;
    abstract public function createStrokedShape from (stroke is Stroke) to Path2D;
    abstract public function apply from (output is Path2D) to ();
    abstract public function contains from (x is Number, y is Number) to Boolean;
    public function flatten from (flatness is Number) to Path2D;
    public function getPoints to Point2[];
    public function getPoints from (mat is Mat4) to Point2[];
    public function clip from (other is Path2D) to Path2D;
    public function mul from (mat is Mat4) to Path2D;
}

public function rect
    from (fac is Path2DFactory, x is Number, y is Number, width is Number, height is Number) 
    to Path2D
{
    rect(fac, x, y, width, height, Mat4.<<1>>);
}

public function rect
    from (fac is Path2DFactory, x is Number, y is Number, width is Number, height is Number, textureMatrix is Mat4) 
    to Path2D
{
    rect(fac.createPath(), x, y, width, height, textureMatrix);
}

public function rect
    from (path is Path2D, x is Number, y is Number, width is Number, height is Number, textureMatrix is Mat4) 
    to Path2D
{
    path.setTextureMatrix(textureMatrix);
    path.moveTo(x, y);
    path.lineTo(x+width, y);
    path.lineTo(x+width, y+height);
    path.lineTo(x, y+height);
    path.closePath();
    return path;
}

public function roundRect 
    from (fac is Path2DFactory,
          x is Number, y is Number,
          w is Number, h is Number, 
          arcWidth is Number, arcHeight is Number)
    to Path2D
{
    if (arcWidth == 0 and arcHeight == 0) {
        return rect(fac, x, y, w, h);
    }
    const u = 0.5 - 2.0 / 3.0 * (java.lang.Math.sqrt(2.0) - 1.0);
    const path = fac.createPath();
    path.moveTo(x + 0.0 * w + 0.5 * arcWidth, y);
    path.lineTo(x + 1.0 * w + -0.5 * arcWidth, y);
    path.cubicTo(x + 1.0 * w + -u  * arcWidth, y,
                 x + 1.0 * w, y + u * arcHeight,
                 x + 1.0 * w, y + 0.5 * arcHeight);
    path.lineTo(x + 1.0 * w, y + 1.0 * h + -0.5 *arcHeight);
    path.cubicTo(x + 1.0 * w +  0.0  *arcWidth, y + 1.0 *h +  -u *arcHeight,
                 x + 1.0 * w + -u    *arcWidth, y + 1.0 *h + 0.0 *arcHeight,
                 x + 1.0 * w + -0.5  *arcWidth, y + 1.0 *h + 0.0 *arcHeight);
    path.lineTo(x + 0.0 * w + 0.5 *arcWidth, y + 1.0 * h + -0.0 *arcHeight);
    path.cubicTo(x + 0.0 * w +  u    *arcWidth, y + 1.0 *h +  0.0 *arcHeight,
                 x + 0.0 * w +  0.0  *arcWidth, y + 1.0 *h +   -u *arcHeight,
                 x + 0.0 * w +  0.0  *arcWidth, y + 1.0 *h + -0.5 *arcHeight);
    path.lineTo(x + 0.0 * w + 0.0 *arcWidth, y + 0.0 * h + 0.5 *arcHeight);
    path.cubicTo(x + 0.0 * w +  0.0  *arcWidth, y + 0.0 *h +  u *arcHeight,
                 x + 0.0 * w +  u    *arcWidth, y + 0.0 *h + 0.0 *arcHeight,
                 x + 0.0 * w +  0.5  *arcWidth, y + 0.0 *h + 0.0 *arcHeight);
    return path;
}


public function ellipse
    from (fac is Path2DFactory, 
	  x is Number, y is Number, 
	  width is Number, height is Number) to Path2D
{
    const u = 2.0 / 3.0 * (sqrt(2.0) - 1.0);
    const points = 
	[1.0, 0.5 + u, 0.5 + u, 1.0, 0.5, 1.0 ,
	 0.5 - u, 1.0, 0.0, 0.5 + u, 0.0, 0.5 ,
	 0.0, 0.5 - u, 0.5 - u, 0.0, 0.5, 0.0 ,
	 0.5 + u, 0.0, 1.0, 0.5 - u, 1.0, 0.5];
    const path = fac.createPath();
    var p = 6 * 3;
    path.moveTo(x+points[p+4]*width,
                y+points[p+5]*height);
    for (i in [0..3]) {
        p = 6 * i;
        path.cubicTo(x+points[p]*width,
                     y+points[p+1]*height,
                     x+points[p+2]*width,
                     y+points[p+3]*height,
                     x+points[p+4]*width,
                     y+points[p+5]*height);
    }
    path.closePath();
    return path;
}

function makePolygon from (fac is Path2DFactory,
			   points is Number[]) to Path2D
{

    if (points.size() >= 4) {
	const p = fac.createPath();
	p.moveTo(points[0], points[1]);
	for (i in [2..<points.size() step 2]) {
	    p.lineTo(points[i], points[i+1]);
	}
	p.closePath(); p
    } else null
}

public function createMesh 
    from (path is Path2D, 
	  stroke is Stroke)
    to AbstractMesh 
{
    if (stroke <> null) {
        createMesh(path.createStrokedShape(stroke), null);
    } else {
        path.createMesh();
    }
}

public interface Paint 
{
}

public class ColorPaint is Paint 
{
    public var color is Color = Color.WHITE;
}

public const TransparentPaint = ColorPaint(Color.TRANSPARENT);

public function ColorPaint from (color is Color) to ColorPaint 
{
    ColorPaint { color: color }
}

const TRANSPARENT_WHITE = new Color(1, 1, 1, 0);

public class TexturePaint is ColorPaint 
{
    override var color = TRANSPARENT_WHITE;
    public var texture is AbstractTexture;
}

public function TexturePaint
    from (texture is AbstractTexture)
    to TexturePaint 
{
     TexturePaint { texture: texture };
}

public abstract class GradientPaint is Paint 
{
    public var colors is Color[];
    public var stops is Number[];
    public var transform is Mat4 = Mat4.<<1>>;
    public var proportional is Boolean = true;
    public var spreadMethod is SpreadMethod;
    override public function toString to String 
    {
        "{super.toString()} {foreach (i in colors) "{i} "}, {foreach (i in stops) "{i} "}";
    }
}

public class LinearGradient is GradientPaint 
{
    public var x1 is Number = 0;
    public var y1 is Number = 0;
    public var x2 is Number = 0;
    public var y2 is Number = 1.0;
    override public function toString to String {
        "{super.toString()} ({x1}, {y1}, {x2}, {y2})";
    }
}

public class RadialGradient is GradientPaint 
{
    public var focusX is Number = 0.5;
    public var focusY is Number = 0.5;
    public var centerX is Number = 0.5;
    public var centerY is Number = 0.5;
    public var radius is Number = 1.0;
    override public function toString to String 
    {
        "{super.toString()}, radius {radius}, focus ({focusX}, {focusY})";
    }
}

public const DEFAULT_STROKE = Stroke {
    scale: 1.0, 
    width: 1.0, 
    cap: Stroke.Cap.BUTT, 
    join: Stroke.Join.MITER,
    miterlimit: 1.0;
    dash: [];
    dashPhase: 0.0;
};

function getStroke from (stroke is Stroke) to Stroke 
{
    if (stroke == null) then DEFAULT_STROKE else stroke;
}


public abstract class Shape2D is Node, MouseInputHandler 
{
public bound function createMeshNode
    from (
	  p is Path2D, 
	  stroke is Stroke, 
	  paint is Paint,
          gridFit is Boolean)
    to MeshNode2D 
{
    createMeshNode("", p, stroke, paint, gridFit);
}

public bound function createMeshNode
    from (id is String,
	  p is Path2D, 
	  stroke is Stroke, 
	  paint is Paint,
          gridFit is Boolean)
    to MeshNode2D 
{
    if (paint == null or p == null) then null else {
	    MeshNode2D {
		id: id,
		paint: bind paint;
                gridFit: bind gridFit;
		override var path = bind if (stroke == null) then p else p.createStrokedShape(stroke);
            }
        }
}
    public const factory is Path2DFactory = the Path2DFactory;
    public var stroke is Stroke;
    public var strokePaint is Paint;
    public var fillPaint is Paint;
    public var cx is Number;
    public var cy is Number;
    public readonly var path is Path2D;
    public var gridFit is Boolean = true;

    public readonly var fillMesh is MeshNode2D = bind createMeshNode("{id}#fill", 
                                                                     path, 
                                                                     null, 
                                                                     fillPaint,
                                                                     gridFit);

    public readonly var strokeMesh is MeshNode2D = bind createMeshNode("{id}#stroke", 
                                                                       path, 
                                                                       getStroke(stroke), 
                                                                       strokePaint,
                                                                       gridFit);
    var cb is Bounds;
    override var contentBounds = bind cb;


    override public function of b foldLeft 
	from (z is b,
	      f is function from (b, Node) to b) 
	to b
    { 
        var r = f(z, this);
        if (fillMesh <> null) r = fillMesh.foldLeft(r, f);
        if (strokeMesh <> null) r = strokeMesh.foldLeft(r, f);
	return r
    }

    override public function of b foldRight
	from (z is b,
	      f is function from (Node, b) to b) 
	to b
    { 
        var r = z;
	if (strokeMesh <> null) r = strokeMesh.foldRight(r, f);
        if (fillMesh <> null) r = fillMesh.foldRight(r, f);
        f(this, r);
    }

    override function updateParent to () 
    {
        fillMesh.setParent(this);
        fillMesh.updateParent();
        strokeMesh.setParent(this);
        strokeMesh.updateParent();
        cb = Bounds.merge(strokeMesh.bounds, fillMesh.bounds);
    }
}

public class MeshNode2D is MeshNode 
{
    public readonly var paint is Paint;
    public readonly var path is Path2D;
    override var mesh = bind path.createMesh();
    override var contentBounds = bind path.getBounds();
    public var gridFit is Boolean = true;
}

public class Circle is Shape2D 
{
    public var radius is Number = 1; 
    override var path = bind ellipse(factory, cx-radius, cy-radius, radius*2, radius*2);
}

public class Ellipse is Shape2D 
{
    public var radiusX is Number = 1;
    public var radiusY is Number = 1;
    override var path = bind ellipse(factory, cy-radiusX, cx-radiusY, radiusX*2, radiusY*2);
}

public class Rectangle is Shape2D 
{
    public var width is Number = 1;
    public var height is Number = 1;
    public var arcWidth is Number = 0.0;
    public var arcHeight is Number = 0.0;
    override var path = bind roundRect(factory, cx-width/2, cy-height/2, width, height, arcWidth, arcHeight);
}

public class Polygon is Shape2D {
    public var points is Number[];
    override var path = bind makePolygon(factory, points);
}

public abstract class PathElement {
    public abstract function apply from (p is Path2D) to ();
}

public class MoveTo is PathElement {
    public const x is Number;
    public const y is Number;
    override public function equals from (obj is Object) to Boolean
    {
        (obj is MoveTo) and {
            const p = obj as MoveTo;
            p.x == x and p.y == y;
        }
    }

    public override function apply from (p is Path2D) to ()
    {
        p.moveTo(x, y);
    }

}

public class LineTo is PathElement {
    public const x is Number;
    public const y is Number;
    override public function equals from (obj is Object) to Boolean
    {
        (obj is LineTo) and {
            const p = obj as LineTo;
            p.x == x and p.y == y;
        }
    }

    public override function apply from (p is Path2D) to ()
    {
        p.lineTo(x, y);
    }
}

public class CubicTo is PathElement {
    public const cx1 is Number;
    public const cy1 is Number;
    public const cx2 is Number;
    public const cy2 is Number;
    public const x is Number;
    public const y is Number;
    override public function equals from (obj is Object) to Boolean
    {
        (obj is CubicTo) and {
            const p = obj as CubicTo;
            p.x == x and p.y == y and p.cx2 == cx2 and p.cy2 == cy2 and p.cx1 == cy1;
        }
    }
    public override function apply from (p is Path2D) to ()
    {
        p.cubicTo(cx1, cy1, cx2, cy2, x, y);
    }
}

public const ClosePath = PathElement {
    public override function apply from (p is Path2D) to ()
    {
        p.closePath();
    }
}

public class Path is Shape2D {

    public var content is PathElement[];

    override var path = bind buildPath(content);

    function buildPath from (content is PathElement[]) to Path2D
    {
        const path = factory.createPath();
        for (x in content) {
            x.apply(path);
        }
        return path;
    }
}

public class PathLine {
    public var path is Path2D;
    public readonly var mesh is AbstractMesh = bind toMesh(path);
    const lineMesh = LineMesh {};
    function toMesh from (path is Path2D) to AbstractMesh {
        const p = path.flatten(.005);
        lineMesh.reset();
        p.apply(Path2D {
                override public function moveTo from (x0 is Number, y0 is Number) to () { 
                    lineMesh.moveTo(x0, y0, 0);
                }
                override public function lineTo from (x1 is Number, y1 is Number) to () {
                    lineMesh.lineTo(x1, y1, 0);
                }
                override public function quadTo from (cx1 is Number, cy1 is Number, 
                                                      x2 is Number, y2 is Number) to () { 
                }
                override public function cubicTo from (cx1 is Number, cy1 is Number, 
                                                       cx2 is Number, cy2 is Number,
                                                       x2 is Number, y2 is Number) to () { 
                }
                override public function closePath to () { 
                    lineMesh.close();
                }
                override public function reset to () { }
                override public function premultiply from (m is Mat4) to Path2D { null }
                override public function mul from (m is Mat4) to Path2D { null }
                override public function clip from (other is Path2D) to Path2D { null }
                override public function createMesh to AbstractMesh { null }
                override public function setTextureMatrix from (mat is Mat4) to () { }
                override public function getBounds to Bounds { null }
                override public function createStrokedShape from (stroke is Stroke) to Path2D { null }
                override public function apply from (output is Path2D) to () { }
                override public function contains from (x is Number, y is Number) to Boolean { false }
                override public function flatten from (flattness is Number) to Path2D { null }
                override public function getPoints to Point2[] { [] }
                override public function getPoints from (mat is Mat4) to Point2[] { [] }
            });
        lineMesh.getMesh();
    }
}


public function moveTo from (p is Tuple2) to MoveTo 
{
    MoveTo { x: p.x, y: p.y }
}

public function lineTo from (p is Tuple2) to LineTo 
{
    LineTo { x: p.x, y: p.y }
}

public function cubicTo from (c1 is Tuple2, c2 is Tuple2, p2 is Tuple2) to CubicTo 
{
    CubicTo {
        cx1: c1.x;
        cy1: c1.y;
        cx2: c2.x;
        cy2: c2.y;
        x: p2.x;
        y: p2.y;
    }
}

