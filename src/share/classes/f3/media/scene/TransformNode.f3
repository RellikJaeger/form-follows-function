package f3.media.scene;
import f3.math.LinearMath.*;
import f3.math.*;

public class TransformNode is Group//, Transform 
{
    public function setTranslation from (point is Point3) to () 
    {
        tx = point.x; 
        ty = point.y; 
        tz = point.z;
    }

    public function setScale from (t is Tuple3) to () 
    {
        sx = t.x; 
        sy = t.y; 
        sz = t.z;
    }

    public function setPivot from (point is Point3) to () 
    {
        px = point.x; 
        py = point.y; 
        pz = point.z;
    }

    public function setRotation from (t is Tuple3) to () 
    {
        rx = t.x; 
        ry = t.y; 
        rz = t.z;
    }

    // translation
    public var tx is Number;
    public var ty is Number;
    public var tz is Number;
    // rotation
    public var rx is Number;
    public var ry is Number;
    public var rz is Number;
    // scale
    public var sx is Number = 1.0;
    public var sy is Number = 1.0;
    public var sz is Number = 1.0;
    // rotation/scale pivot
    public var px is Number;
    public var py is Number;
    public var pz is Number;

    override public bound function getPivot to Mat4 
    { 
	translate(tx+px, ty+py, tz+pz);
    }

    override public bound function getScalePivot to Mat4 {
	getPivot() * rotate(rx, ry, rz) 
    }

    public bound function computeTransform to Mat4 
    {
        translate(tx+px, ty+py, tz+pz)*rotate(rx, ry, rz)*scale(sx, sy, sz)*translate(-px, -py, -pz);
    }

    override var transform = bind computeTransform();
    /*
        bind trsp(tx, ty, tz,      
                  rx, ry, rz,
                  sx, sy, sz,
                  px, py, pz);
    */
    function trsp 
	from (tx is Number,
	      ty is Number,
	      tz is Number,
	      rx is Number,
	      ry is Number,
	      rz is Number,
	      sx is Number,
	      sy is Number,
	      sz is Number,
	      px is Number,
	      py is Number,
	      pz is Number) 
	to Mat4 
    {
    //        println("{id} => t={tx},{ty},{tz} r={rx},{ry},{rz} s={sx},{sy},{sz} p={px},{py},{pz}");
        translate(tx+px, ty+py, tz+pz)*rotate(rx, ry, rz)*scale(sx, sy, sz)*translate(-px, -py, -pz);
    }
}