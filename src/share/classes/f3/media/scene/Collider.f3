package f3.media.scene;
import f3.math.*;
import f3.math.LinearMath.*;
import f3.util.*;
import java.lang.Comparable;

public class ContactPoint extends Comparable of ContactPoint {

    public const point is Point3;
    public const normal is Vec3;
    public const thisCollider is Collider;
    public const otherCollider is Collider;

    override public function equals from (other is Object) to Boolean 
    {
        if (other is ContactPoint) {
            const o = other as ContactPoint;
            return 
                point == o.point and 
                normal == o.normal and
                thisCollider == o.thisCollider and
                otherCollider == o.otherCollider;
        }
        return false;
    }

    override public function toString to String {
        return "Contact Point {point} normal {normal} with {otherCollider}";
    }

    override public function compareTo from (p is ContactPoint) to Integer {
        var hc1 = java.lang.System.identityHashCode(thisCollider);
        var hc2 = java.lang.System.identityHashCode(p.thisCollider);
        var cmp = hc1 - hc2;
        if (cmp <> 0) {
            return cmp;
        }
        hc1 = java.lang.System.identityHashCode(otherCollider);
        hc2 = java.lang.System.identityHashCode(p.otherCollider);
        cmp = hc1 - hc2;
        if (cmp <> 0) {
            return cmp;
        }
        cmp = point.compareTo(p.point);
        if (cmp <> 0) {
            return cmp;
        }
        cmp = normal.compareTo(p.normal);
        return cmp;
    }
}

public class Collision {
    public const collider is Collider;
    public var contacts is ContactPoint[];
}

public abstract class Collider {
    public var dynamicsWorld is DynamicsWorld;
    public var constraints is RigidBodyConstraint[];
    public var mass is Number;
    public var dynamic is Boolean = false;
    public var friction is Number = 0.5;
    public var restitution is Number; 
    public var tracksCollisions is Boolean = false;
    public var collisionInitialVelocity is Vec3 = Vec3.<<0>>;
    public var collisionInitialSpin is Vec3 = Vec3.<<0>>;
    public var collisionInitialOrientation is Vec3 = Vec3.<<0>>;
    public var collisionInitialPosition is Point3 = Point3.<<0>>;

    public bound var initialTransform is Mat4 = 
        translate(collisionInitialPosition + (centerOfMass - Point3.<<0>>)) *
        (if (collisionInitialOrientation <> Vec3.<<0>>) 
            then rotate(collisionInitialOrientation.x, collisionInitialOrientation.y, collisionInitialOrientation.z)
        else Mat4.<<1>>);

    public bound var initialTransformInverse is Mat4 = initialTransform.inverse();


    public var centerOfMass is Point3 = Point3.<<0>>;
    public var active is Boolean = true;
    public readonly var linearFactor is Vec3 = Vec3.<<1>>;
    public readonly var angularFactor is Vec3 = Vec3.<<1>>;
    public var angularDamping is Number = 0.5;
    public var linearDamping is Number = 0.0;
    public bound function needsCollisions to Boolean 
    {
        tracksCollisions or
            onCollisionEnter <> null or 
            onCollisionLeave <> null;
    }
    public readonly var collisions is Collision[];
    public function update to ();
    protected function addCollision from (c is Collision) to ()
    {
        insert c into collisions;
    }
    protected function removeCollision from (c is Collision) to ()
    {
        delete c from collisions;
    }
    protected function setCollisions from (xs is Collision[]) to ()
    {
        collisions = xs;
    }
    public var onCollisionEnter is function from Collision to ();
    public var onCollisionLeave is function from Collision to ();
    public var collidable is Collidable;
    public abstract function applyConstraint from (collider is Collider, constraint is RigidBodyConstraint) to Boolean;
    public function getCollisionWorldTransform to Mat4;
    public function applyForce from (v is Vec3) to ();
    public function applyForce from (x is Number, y is Number, z is Number) to ();
    public function applyTarque from (v is Vec3) to ();
    public function applyTorque from (x is Number, y is Number, z is Number) to (); 
    public function setAngularFactor from (v is Vec3) to ();
    public function setLinearFactor from (v is Vec3) to ();
    public function getLinearVelocity from () to Vec3; 
    public function getAngularVelocity from () to Vec3; 
    public function setLinearVelocity from (v is Vec3) to ();
    public function setLinearVelocity from (x is Number, y is Number, z is Number) to (); 
    public function setAngularVelocity from (v is Vec3) to (); 
    public function setAngularVelocity from (x is Number, y is Number, z is Number) to (); 
    public function applyImpulse from (v is Vec3) to (); 
    public function applyImpulse from (x is Number, y is Number, z is Number) to (); 
    public function applyTarqueImpulse from (v is Vec3) to ();
    public function applyTorqueImpulse from (x is Number, y is Number, z is Number) to ();

    //public function observeCollisions to Observable of Collision:

}