package f3.media.scene;
import f3.media.scene.Shape2D.*;
import f3.media.input.*;
import f3.math.*;
import f3.math.LinearMath.*;
import java.lang.Math;

public class Pick 
{
    public const charIndex is Integer;
    public const insertionIndex is Integer;
    public const isLeadingEdge is Boolean;
    public const row is Integer;
    public const column is Integer;
    public const x is Number;
    public const y is Number;
    override function toString to String {
        "Pick ({row}, {column}) @({x}, {y}) char {charIndex}, insert {insertionIndex} isLeadingEdge {isLeadingEdge}";
    }
}

public interface Layout 
{
    public abstract function getShape to Path2D;
    public abstract function getCaretShape from (caret is Integer) to Path2D;
    public abstract function getSelectionShape 
	from (selectionStart is Integer, 
	      selectionEnd is Integer) 
	to Path2D;
    public abstract function pick from (x is Number, y is Number) to Pick;
    public abstract function pickCell from (row is Integer, column is Integer) to Pick;
    public abstract function pick from (charIndex is Integer) to Pick;
}

public interface Font 
{
    public const name is String;
    public const ascent is Number;
    public const descent is Number;
    public const leading is Number;
    public function height to Number { ascent+descent+leading }
}

public interface LayoutInstance 
{
    public abstract function createLayout
	from (text is String, 
	      font is Font, 
	      wrapWidth is Integer, 
	      clipHeight is Integer) 
	to Layout;
}

public interface LayoutEngine 
{
    public abstract function createFont from (spec is String) to Font;
    public abstract function createLayoutInstance to LayoutInstance;
}

public class TextMeshNode is MeshNode2D 
{
    public readonly var textLayout is Layout;
    override var path = bind textLayout.getShape();
}

public class Area is AbstractNode, Focusable, KeyboardInputHandler, MouseInputHandler 
{
    public var width is Number = 300;
    public var height is Number = bind font.height();
    public const layoutEngine is LayoutEngine = the LayoutEngine;
    public const pathFactory is Path2DFactory = the Path2DFactory;
    public var font is Font = layoutEngine.createFont("font-size:14;font-family:Dialog;");
    public var background is Paint = ColorPaint { color: Color.color(.9, .9, .9, 1) };
    public var foreground is Paint = ColorPaint { color: Color.BLACK };
    public var selectionForeground is Paint = ColorPaint { color: Color.BLACK };
    public var selectionBackground is Paint = ColorPaint { color: Color.WHITE };
    override var cursor = Cursor.IBeam;
    public readonly var text is String = "";
    const buffer = new java.lang.StringBuffer;
    var selectionStart is Integer;
    var selectionEnd is Integer;
    var caretPosition is Integer;
    readonly var start = bind Math.min(selectionStart, selectionEnd);
    readonly var end = bind Math.max(selectionStart, selectionEnd);
    const rect = Rectangle {
	factory: pathFactory;
        height: bind height;
        width: bind width;
        fillPaint: bind background;
    };
    readonly var layoutInstance = bind layoutEngine.createLayoutInstance();
    readonly var layout = bind layoutInstance.createLayout(text, font, width, height);
    readonly var selectionShape = bind layout.getSelectionShape(start, end);
    readonly var caretShape = bind layout.getCaretShape(caretPosition);
    readonly var selectionMesh = bind createMeshNode(selectionShape, null, selectionBackground);
    readonly var textMesh = bind createTextMeshNode(layout, foreground);
    function createTextMeshNode from (layout is Layout, foreground is Paint) to TextMeshNode 
    {
	const t = TextMeshNode {
	    override var paint = foreground;
	    override var textLayout = layout;
	}
	t.setParent(contentGroup);
	return t;
    }
    readonly var caretMesh = bind createMeshNode(caretShape, null, foreground);
    var column is Number;
    var isLeading is Boolean;
    var dirty = true;

    function markDirty {
	dirty = true;
    }

    public function setText from (text is String) to () 
    {
	selectAll();
	deleteSelection();
	insertText(text);
    }

    readonly var contentGroup is Group = Group {
	override var transform = bind translate(0, height / 2, 0);
	content: bind [selectionMesh, textMesh, caretMesh];
    }

    override var internalContent = Group {
        content: bind [rect, contentGroup];
    }

    override function onMouseDown from (event is MouseEvent) to () 
    {
	const pt = event.location;
	const mouseHit = layout.pick(pt.x, pt.y);
	if (mouseHit <> null)  {
	    const index = mouseHit.insertionIndex;
	    caretPosition = index;
	    if (event.clickCount == 3) {
		selectAll();
	    } else {
		selectionStart = selectionEnd = index;
	    }
	} else {
	    selectAll();
	}
	updateColumn();
    }

    var lastTime is Long;

    override function update 
    {
	if (dirty) {
	    text = buffer.toString();
	    dirty = false;
	}
        const now = java.lang.System.currentTimeMillis();
        if (not focused) {
            caretMesh.visible = false;
        } else {
            if (caretMesh.visible) {
                if (now - lastTime >= 600) {
                    lastTime = now;
                    caretMesh.visible = false;
                }
            } else if (now - lastTime >= 400) {
                caretMesh.visible = true;
                lastTime = now;
            }
        }
    }

    override function onMouseDrag from (event is MouseEvent) to () 
    {
        const pt = event.location;
        const mouseHit = layout.pick(pt.x, pt.y);
        if (mouseHit <> null) {
            const index = mouseHit.insertionIndex;
            selectionEnd = caretPosition = index;
        }
	updateColumn();
    }

    override function onKeyDown from (event is KeyboardEvent) to () 
    {
	const code = event.keyCode;
	if (code == Keys.Left) {
	    moveCaretLeft(event.shiftKey);
	} else if (code == Keys.Up) {
	    moveCaretUp(event.shiftKey);
	} else if (code == Keys.Right) {
	    moveCaretRight(event.shiftKey);
	} else if (code == Keys.Down) {
	    moveCaretDown(event.shiftKey);
	} else if (code == Keys.Home) {
	    moveCaret(0, event.shiftKey, true);
	} else if (code == Keys.End) {
	    moveCaret(buffer.length(), event.shiftKey, true);
	} else if (code == Keys.Backspace or code == Keys.Delete) {
	    deleteChars();
	}
    }

    override function onKeyInput from (event is KeyboardEvent) to () 
    {
	const code = event.keyCode;
	const keyChar = event.keyChar;
	if (code == Keys.Backspace) {
	    backspace();
	} else {
	    if (keyChar.length() > 0) {
		insertText(keyChar);
	    }
	}
    }

    public function deleteSelection 
    {
        if (start < end) {
            caretPosition = start;
            buffer.delete(start, end);
            clearSelection();
            markDirty();
        }
    }

    function deleteChars 
    {
        if (start < end) {
            buffer.delete(start, end);
            caretPosition = start;
            selectionEnd = selectionStart = caretPosition;
            markDirty();
        }
    }

    function backspace 
    {
        if (start < end) {
            deleteChars();
        } else {
            if (caretPosition > 0 and caretPosition <= buffer.length()) {
                buffer.delete(caretPosition-1, caretPosition);
                moveCaretLeft(false);
                markDirty();
            }
        }
    }

    public function selectAll 
    {
        selectionStart = 0;
        selectionEnd = buffer.length();
    }

    public function clearSelection  
    {
        selectionStart = selectionEnd = caretPosition;
    }

    public function insertText from (ch is String) to () 
    {
        deleteSelection();
        buffer.insert(caretPosition, ch);
        caretPosition += ch.length();
	markDirty();
    }

    function moveCaretUp from (shift is Boolean) to () 
    {
	const hit = layout.pick(caretPosition);
	if (hit.row > 0) {
	    var up = layout.pickCell(hit.row-1, Integer.MAX_VALUE);
	    if (up <> null) {
		const y = up.y;
		const up1 = layout.pick(column, y);
		if (up1 <> null) up = up1;     
		moveCaret(up.insertionIndex, shift, false);
	    }
	}
    }

    function moveCaretDown from (shift is Boolean) to () 
    {
	const hit = layout.pick(caretPosition);
	var down = layout.pickCell(hit.row+1, Integer.MAX_VALUE);
	if (down <> null) {
	    const y = down.y;
	    const down1 = layout.pick(column, y);
	    if (down1 <> null) down = down1;
	    if (down <> null) {
		moveCaret(down.insertionIndex, shift, false);
	    }
	}
    }

    function moveCaretLeft from (shift is Boolean) to () 
    {
        moveCaret(caretPosition-1, shift, true);
    }

    function moveCaretRight from (shift is Boolean) to ()
    {
        moveCaret(caretPosition+1, shift, true);
    }

    function moveCaret
	from (toPos is Integer, 
	      shift is Boolean, 
	      setColumn is Boolean)
	to ()
    {
        caretPosition = Math.max(Math.min(toPos, text.length()), 0);
        if (shift) {
            selectionEnd = caretPosition;
        } else {
            selectionStart = selectionEnd = caretPosition;
        }
        if (setColumn) {
	    updateColumn();
        }
    }

    function updateColumn 
    {
	column = caretShape.getBounds().center.x;
    }

}