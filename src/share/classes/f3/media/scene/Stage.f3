package f3.media.scene;
import f3.media.input.*;
import f3.util.*;

public const DEBUG_CURSOR = Boolean.getBoolean("f3.debug.cursor");

public interface Stage
{
    public const menubar is Menu.Bar;
    public const alphaBits is Integer = 0;
    public const colorBits is Integer = 32;
    public const depthBits is Integer = 32;
    public const stencilBits is Integer = 0;

    public var width is Integer = 640;
    public var height is Integer = 480;
    public var content is Scene[];
    
    public function resize 
	from (width is Integer, height is Integer, outsideWidth is Integer, outsideHeight is Integer) 
	to () 
    {
	this.width = width; this.height = height;
        this.outsideHeight = outsideHeight;
        this.outsideWidth = outsideWidth;
    }
    
    public function resize 
	from (width is Integer, height is Integer) 
	to () 
    {
	this.width = width; this.height = height;
        outsideHeight = height;
        outsideWidth = width;
    }

    public bound function getStageWidth to Number 
    {
	width;
    }

    public bound function getStageHeight to Number 
    {
	height;
    }

    public function pick
	from (screenx is Number, screeny is Number)
	to Pick[]
    {
	var result is Pick[];

	for (scene in content.reverse()) {
            var blocked = false;
            const ns = scene.pick(screenx, screeny);
            insert ns into result;
            if (ns <> []) {
                for (x in ns) {
                    if (x.node.blocksPointer) {
                        blocked = true;
                        break;
                    }
                }
            }
            if (blocked) break;
	}
	return result;
    }

    public function injectMouseWheel from (event is MouseWheelEvent) to ()
    {
        for (h in mouseHandlers) {
            h.onMouseWheel(event);
	    if (not event.propagate) break;
        }
        for (c in content.reverse()) {
	    if (not event.propagate) break;
            c.injectMouseWheel(event);
        }
    } 

    public function injectMouseDown from (event is MouseEvent) to () 
    {
        var focusSet = false;
	var blocked = false;
        for (c in content.reverse()) {
            c.injectMouseDown(event);
            if (not focusSet and c.focus <> null) {
                focusSet = true;
                focusedScene = c;
            }
            for (x in c.pressed) {
                if (x.node.blocksPointer) {
                    insert c into pressed;
                    blocked = true;	  
                    break;
                }
            }
            if (blocked) break;
        }
	//	println("mouse down: {event}");
        if (not blocked) for (h in mouseHandlers) {
            h.onMouseDown(event);
        }
        if (not focusSet) {
            focusedScene = null;
        }
    }

    public function injectMouseUp from (event is MouseEvent) to () {
    	var hit = pressed <> [];
        if (not hit) for (h in mouseHandlers) {
            h.onMouseUp(event);
        }
        for (c in pressed) {
            c.injectMouseUp(event);
        }
        pressed = [];
    }

    var pressed is Scene[];

    public function injectMouseMove from (event is MouseEvent) to () {
        for (h in mouseHandlers) {
            h.onMouseMove(event);
        }
        var blocked = false;
        if (pressed <> []) {
            for (c in pressed) {
                c.injectMouseMove(event);
            }
        } else {
            for (c in content.reverse()) {
                c.injectMouseMove(event);
                for (j in c.underMouse) {
                    if (j.node.blocksPointer) {
                        blocked = true;
                    }
                }
                if (blocked) break;
            }
        }
        for (c in content.reverse()) {
            c.updateMousePosition(event);
        }
    }

    protected var mouseHandlers is MouseInputHandler[];

    public function addMouseInputHandler from (h is MouseInputHandler) to ()
    {
	delete h from mouseHandlers;
        insert h into mouseHandlers;
    }

    public function removeMouseInputHandler from (h is MouseInputHandler) to ()
    {
        delete h from mouseHandlers;
    }

    protected var dndHandlers is DnDInputHandler[];

    public function addDnDInputHandler from (h is DnDInputHandler) to ()
    {
        delete h from dndHandlers;
        insert h into dndHandlers;
    }

    public function removeDnDInputHandler from (h is DnDInputHandler) to () 
    {
        delete h from dndHandlers;
    }

    public function injectDragEnter from (event is DragEvent) to () 
    {
        for (h in dndHandlers) {
            h.onDragEnter(event);
        }
        for (c in content.reverse()) {
            c.injectDragEnter(event);
        }
    }

    public function injectDragLeave from (event is DragEvent) to () 
    {
        for (h in dndHandlers) {
            h.onDragLeave(event);
        }
        for (c in content.reverse()) {
            c.injectDragLeave(event);
        }
    }

    public function injectDragOver from (event is DragEvent) to () 
    {
        for (h in dndHandlers) {
            h.onDragOver(event);
        }
        for (c in content.reverse()) {
            c.injectDragOver(event);
        }
    }

    public function injectDrop from (event is DropEvent) to () 
    {
        for (h in dndHandlers) {
            h.onDrop(event);
        }
        for (c in content.reverse()) {
            c.injectDrop(event);
        }
    }

    public var defaultCursor is Cursor;

    public readonly var cursor is Cursor;

    protected function updateCursor to () 
    {
	var sceneCursor is Cursor = defaultCursor;
	for (scene in content.reverse()) {
	    if (scene.cursor <> null) {
                if (DEBUG_CURSOR) {
                    println("using cursor of {scene}");
                }
                sceneCursor = scene.cursor;
		break;
	    }
	}
	cursor = sceneCursor;
    }

    protected var keyboardHandlers is KeyboardInputHandler[];

    public readonly var focusedScene is Scene;

    protected function getFocusedScene to Scene 
    {
        return focusedScene;
    }

    package function setFocusedScene from (scene is Scene) to ()
    {
        focusedScene = scene;
    }

    const keysDown = new java.util.TreeSet of Integer;

    public function injectKeyDown from (event is KeyboardEvent)to () {
	keysDown.add(event.keyCode);
	const target = getFocusedScene();
	if (target.focus <> null) {
	    target.injectKeyDown(event);
	} 
	if (event.propagate) {
	    for (h in keyboardHandlers) {
		h.onKeyDown(event);
	    }
	}
    }

    public function injectKeyInput from (event is KeyboardEvent) to () 
    {
	const target = getFocusedScene();
	if (target.focus <> null) {
	    target.injectKeyInput(event);
	} 
	if (event.propagate) {
	    for (h in keyboardHandlers) {
		h.onKeyInput(event);
	    }
	}
    }

    public function injectKeyUp from (event is KeyboardEvent) to () 
    {
        keysDown.remove(event.keyCode);
	const target = getFocusedScene();
	if (target.focus <> null) {
	    target.injectKeyUp(event);
	} 
	if (event.propagate) {
	    for (h in keyboardHandlers) {
		h.onKeyUp(event);
	    }
	}
    }

    public function addKeyboardInputHandler from (h is KeyboardInputHandler) to () 
    {
        delete h from keyboardHandlers;
        insert h into keyboardHandlers;
    }

    public function removeKeyboardInputHandler from (h is KeyboardInputHandler) to () 
    {
        delete h from keyboardHandlers;
    }

    protected var updateSubject is Subject of (());
    
    public function observeUpdate to Observable of (()) {
        if (updateSubject == null) updateSubject = Subject of (()) {} else updateSubject;
    }

    public readonly var outsideWidth is Integer;
    public readonly var outsideHeight is Integer;

    public function showPopupMenu from (x is Integer, y is Integer, menu is Menu) to ();
    public function showTooltip from (x is Integer, y is Integer, tooltip is String) to ();
}
 