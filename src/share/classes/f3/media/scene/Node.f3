package f3.media.scene;
import f3.math.*;
import org.f3.runtime.*;
import f3.util.*;
import f3.util.Observable.*;
import f3.media.input.*;

// A Node in the 3d spatial affine transform hierarchy

public abstract class Node is Foldable of Node
{
    override function toString to String {
	"{super.toString()} {id}"
    }
    public var debug is Boolean;
    public var id is String;
    public var cursor is Cursor;
    public readonly var parent is Node;
    public var visible is Boolean = true;
    public readonly var visibleInScene is Boolean =  
	bind visible and parent.visibleInScene;

    public readonly var parentToSceneTransform is Mat4 = 
	bind if parent == null then Mat4.<<1>> else parent.toSceneTransform;
    public readonly var transform is Mat4 = Mat4.<<1>>;
    public function setTransform from (m is Mat4) to ()
    {
	transform = m;
    }
    public readonly var toSceneTransform is Mat4 = 
	bind parentToSceneTransform * transform;
    public readonly var bounds is Bounds = bind transform * contentBounds;
    public readonly var boundsInScene is Bounds = bind parentToSceneTransform * bounds;
    public readonly var contentBounds is Bounds;

    public var blocksPointer is Boolean = false;
    public readonly var containsPointer is Boolean;
    protected function setContainsPointer from (value is Boolean) to () { containsPointer = value; }
    public readonly var pickable is Boolean = true;
    public readonly var pickableInScene is Boolean = 
	bind pickable and parent.pickableInScene;

    override public function foldLeft of b
	from (z is b, f is function from (b, Node) to b) 
	to b
    {
	f(z, this);
    }

    override public function foldRight of b
	from (z is b, f is function from (Node, b) to b) 
	to b
    {
	f(this, z)
    }

    public function updateParent from () to () { update() }
    protected function setParent from (n is Node) to () { parent = n }
    public function update from () to () {}
    public function preupdate from () to () {}

    protected var mouseDown is Subject of MouseEvent;
    protected var mouseUp is Subject of MouseEvent;
    protected var mouseMove is Subject of MouseEvent;
    protected var mouseDrag is Subject of MouseEvent;
    protected var mouseWheel is Subject of MouseWheelEvent;
    protected var mouseEnter is Subject of MouseEvent;
    protected var mouseLeave is Subject of MouseEvent;

    public bound function getPivot { Mat4.<<1>> }
    public bound function getScalePivot { Mat4.<<1>> }

    public bound function getPivotInScene to Mat4 { parentToSceneTransform * getPivot() }
    public bound function getScalePivotInScene to Mat4 { parentToSceneTransform * getScalePivot() }

    var armed is Observable of MouseEvent;
    var disarmed is Observable of MouseEvent;

    public function observeTrigger to Observable of MouseEvent 
    {
        foreach (e in observeArmed()) observeMouseUp().takeUntil(observeMouseLeave());
    }   

    public function observeArmed to Observable of MouseEvent 
    {
        if (armed == null) then {
                // armed if mouse down or mouse enter after mouse down until mouse up
                armed = foreach (press in observeMouseDown()) {
                    const reentersWhilePressed = observeMouseEnter().takeUntil(observeMouseUp());
                    observe(press).followedBy(reentersWhilePressed);
                }
            } else armed;
    }

    public function observeDisarmed to Observable of MouseEvent 
    {
        if (disarmed == null) then {
                // disarmed if mouse up or mouse leave after armed
                disarmed = 
                    foreach (armEvent in observeArmed()) observeMouseLeave().merge(observeMouseUp()).take(1)
            } else disarmed;
    }

    public function observeMouseEnter to Observable of MouseEvent 
    {
	if (mouseEnter == null) 
	    then mouseEnter = Subject of MouseEvent {}
	else mouseEnter;
    }

    public function observeMouseLeave to Observable of MouseEvent 
    {
	if (mouseLeave == null) 
	    then mouseLeave = Subject of MouseEvent {}
	else mouseLeave;
    }

    public function observeMouseDown to Observable of MouseEvent 
    {
	if (mouseDown == null) 
	    then mouseDown = Subject of MouseEvent {}
	else mouseDown;
    }

    public function observeMouseUp to Observable of MouseEvent 
    {
	if (mouseUp == null) 
	    then mouseUp = Subject of MouseEvent {}
	else mouseUp;
    }

    public function observeMouseMove to Observable of MouseEvent 
    {
	if (mouseMove == null) 
	    then mouseMove = Subject of MouseEvent {}
	else mouseMove;
    }

    public function observeMouseDrag to Observable of MouseEvent 
    {
	if (mouseDrag == null) 
	    then mouseDrag = Subject of MouseEvent {}
	else mouseDrag;
    }

    public function observeMouseWheel to Observable of MouseWheelEvent 
    {
	if (mouseWheel == null) 
	    then mouseWheel = Subject of MouseWheelEvent {}
	else mouseWheel;
    }
    /*
    var mouseDrag1 is Observable of MouseEvent = 
         foreach (press in observeMouseDown()) observeMouseMove().takeUntil(observeMouseUp());
    var dummy1 = mouseDrag1.subscribe(Observer of MouseEvent 		     
    {
	override function onNext from (e is MouseEvent) to () {
		 println(e);
	}	
    });
    */
    public function lookup from (id is String) to Node {
	foldLeft(null as Node, 
		 function from (r is Node, n is Node) to Node 
		 {
		     if (r == null and n.id == id) then n else r;
		 })
    }


    public function toFront from () to () 
    {
    	(parent as Group).toFront(this)
    }

    public function toBack from () to () 
    {
    	(parent as Group).toBack(this)
    }

    public function attachFocus from (focus is Focusable) to ()
    {
        focus.attachTo(this);
    }
    
}



