package f3.media.scene;
import f3.math.*;
import f3.math.LinearMath.*;
import f3.media.input.*;
import java.lang.Math;

/** Implements interactive camera control in the same style as Maya
    and similar style as Open Inventor. */

public abstract class ExaminerViewer is MouseInputHandler {

    public abstract function getCameraOrientation to Quat;
    public abstract function getCameraPosition to Point3;
    public abstract function setCameraOrientation from (ori is Quat) to ();
    public abstract function setCameraPosition from (pos is Point3) to ();
    public abstract function getCameraNearDistance to Number;
    public abstract function getCameraFarDistance to Number;
    public abstract function setCameraNearDistance from (n is Number) to ();
    public abstract function setCameraFarDistance from (n is Number) to ();
    public abstract function getCameraViewAllPosition from (bounds is Bounds) to Point3;

    /** This is the distance of the center point in front of the
        camera, around which rotations occur and toward which zooms in
        and out occur. */
    public var centerDistance is Number = 10.0;

    // Whether the viewer's camera is currently active
    public var enabled is Boolean = true;

    // Break recursive update cycles during view all operations
    var updatesDisabled is Boolean;

    /** Speed at which rotation occurs. */
    public var rotateSpeed is Number = 1.0;

    /** Speed at which translation and dollying in / out occurs. */
    public var dollySpeed is Number = 4.0;

    /** Optionally constrains the up vector of the camera to point
        toward this direction. */
    public var upVector is Vec3 = Vec3.Y_AXIS;

    /** Whether the camera should perform a "view all" operation
        during the next update cycle. */
    public var doViewAll is Boolean; 

    var focalPoint is Point3 = Point3.<<0>>;
    var minCenterDistance = 0.01;
    var button1Down is Boolean;
    var button2Down is Boolean;
    var button3Down is Boolean;

    /** The target camera this ExaminerViewer is controlling */

    var dragging = false;
    public var mouseX is Number;
    public var mouseY is Number;

    override function onMouseWheel from (event is MouseWheelEvent) to () 
    {
	const ori = getCameraOrientation();
	const diff = dollySpeed * (-1.0 * event.scroll.y) / 10.0;
	var newCenterDistance = centerDistance + diff;
	if (newCenterDistance < minCenterDistance) {
	    newCenterDistance = minCenterDistance;
	}
	centerDistance = newCenterDistance;
	updateCameraPosition(ori);
    }

    var mouseEnabled = false;

    override function onMouseDown from (event is MouseEvent) to () {
    	mouseEnabled = event.scene.pressed == [];
        if (mouseEnabled) for (b in event.buttons) {
            mouseDown(b, event.ctrlKey, event.altKey);
        }
    }

    override function onMouseUp from (event is MouseEvent) to () {
        if (mouseEnabled) for (b in event.buttons) {
            mouseUp(b);
        }
    }

    override function onMouseMove from (event is MouseEvent) to () {
        if (mouseEnabled) mouseMove(event.screenx, event.screeny,
                                    event.ctrlKey, event.altKey);
    }

    public function mouseDown from (button is Integer, isControlDown is Boolean, isAltDown is Boolean) to () {
        if (button == 1) {
            button1Down = true;
        } else if (button == 2) {
            button2Down = true;
        } else if (button == 3) {
            button3Down = true;
        }
        dragging = button1Down or button2Down or button3Down;
    }

    public function mouseUp from (button is Integer) to () {
        if (button == 1) {
            button1Down = false;
        } else if (button == 2) {
            button2Down = false;
        } else if (button == 3) {
            button3Down = false;
        }
        dragging = button1Down or button2Down or button3Down;
    }

    var firstTime = true;

    public function mouseMove 
	from (mouseX is Number, 
	      mouseY is Number, 
	      isControlDown is Boolean, 
	      isAltDown is Boolean) 
	to Boolean 
    {
        var dragX = mouseX - this.mouseX;
        var dragY = mouseY - this.mouseY;
        this.mouseY = mouseY;
        this.mouseX = mouseX;
	dragging = button1Down or button2Down or button3Down;
	if (firstTime) {
	    firstTime = false;
	    dragX = dragY = 0;
	}
        if (dragging) {
            var doRotation =
                (button1Down and not button2Down and not button3Down);
            var doTranslation =
                (button2Down and not button1Down and not button3Down);
            var doZoom =
                (button3Down and not button1Down and not button2Down);
            // Hack to allow us to use Ctrl + Alt + LMB to translate so
            // that we can do that gesture on the trackpad
            if (isControlDown and (doRotation or doZoom)) {
                doRotation = false;
                doZoom = false;
                doTranslation = true;
            }
            if (isAltDown and doRotation) {
                doRotation = false;
                doZoom = true;
                doTranslation = false;
            }
            updateFocalPoint();
            if (doRotation) {
                // Rotation functionality
                const xRads = Math.PI * -1.0 * dragY * rotateSpeed / 1000.0;
                const yRads = Math.PI * -1.0 * dragX * rotateSpeed / 1000.0;
                const xRot = Quat.Quat(Math.toDegrees(xRads), Vec3.X_AXIS);
                const yRot = Quat.Quat(Math.toDegrees(yRads), Vec3.Y_AXIS);
                const newRot = yRot * xRot;
                var ori = getCameraOrientation();
                if (ori == null) { ori = Quat.<<1>> }
                ori *= newRot;
                
                // If we have an up vector specified, attempt to
                // orient the camera's up vector to point to it
                if (upVector <> null) {
                    var cameraUp = Vec3.Y_AXIS;
                    cameraUp = ori.normalize() * cameraUp;
                    const dotp = cameraUp.dot(upVector);
                    if (Math.abs(dotp) > LinearMath.ZERO_TOLERANCE) {
                        // Form orthonormal basis
                        const back = ori * Vec3.Z_AXIS;
                        var up = upVector;
                        var right = up.cross(back);
                        right = right.normalize();
                        up = back.cross(right).normalize();
                        ori = Quat.Quat(right, up, back);
                    }
                }
                updateCamera(ori);
            } else if (doZoom) {
                // Zoom functionality
                // FIXME: implement this in terms of mouse wheel
                const ori = getCameraOrientation();
                const diff = dollySpeed * (-1.0 * dragY - dragX) / 100.0;
                var newCenterDistance = centerDistance + diff;
                if (newCenterDistance < minCenterDistance) {
                    newCenterDistance = minCenterDistance;
                }
                centerDistance = newCenterDistance;
                updateCameraPosition(ori);
            } else if (doTranslation) {
                // Translate functionality
                // Compute the local coordinate system's difference vector
                var localDiff = vector(dollySpeed * -1.0 * dragX / 100.0,
				       dollySpeed * dragY / 100.0,
				       0.0);
                // Rotate this by camera's orientation
                var ori = getCameraOrientation();
                var sceneDiff = ori * localDiff;
                // Add on to focal point
                focalPoint = focalPoint + sceneDiff;
                updateCameraPosition(ori);
            }
            return true;
        }
        return false;
    }

    public function focusCamera from (object is Node) to () {
        viewAll(object);
    }

    public function focusCamera from (scene is Scene) to () {
        focusCamera(scene.root);
    }

    public function focusCamera from (bounds is Bounds) to () {
        viewAll(bounds, bounds.center, bounds.extent.length());
    }

    package function viewAll from (object is Node) to () {
        const bounds = object.boundsInScene;
        if (bounds == null) { return }
        const newPos = getCameraViewAllPosition(bounds);
        if (newPos == null) { return }
        viewAll(bounds, newPos, (newPos - bounds.center).length());
    }

    package function viewAll from (bounds is Bounds, newPos is Point3, centerDistance is Number) to () {
        if (bounds.extent.length() == 0) {
            return;
        }
        if (newPos == null) {
            // Assume this camera doesn't know how to deal with view all requests
            doViewAll = false;
            return;
        }

        // Determine the center point and radius for the enclosing sphere
        var halfWidth = bounds.extent.x;
        var halfHeight = bounds.extent.y;
        var halfDepth = bounds.extent.z;
        var radius = Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight + halfDepth * halfDepth);
        
        updatesDisabled = true;
        // The camera moves to the new position
        setCameraPosition(newPos);
        // The focal point becomes the center of the sphere
        focalPoint = bounds.center;
        // The center distance becomes the distance between the two
        this.centerDistance = (focalPoint - newPos).length();
        // Potentially update the near and far clipping planes
        if (getCameraNearDistance() > centerDistance - radius) {
            setCameraNearDistance(centerDistance - radius);
        }
        if (getCameraFarDistance() < centerDistance + radius) {
            setCameraFarDistance(centerDistance + radius);
        }
        // Heuristically, this seems to be a good value for the dolly speed
        dollySpeed = Math.max(1.0, radius / 10);
        // If the camera is an orthographic camera, we also need to
        // potentially update its height to accommodate viewing the
        // entire sphere
        // FIXME: figure out how to factor this differently -- would
        // need another abstract method on Camera
        /*
        if (isOrthographicCamera()) {
            var aspect = getCameraAspectRatio();
            var newHeight = 2 * radius;
            if (aspect < 1.0) {
                newHeight /= aspect;
            }
            setCameraViewHeight(viewHeight = newHeight);
        }
        */
        updateCameraPosition(getCameraOrientation());
        updatesDisabled = false;
        doViewAll = false;
    }

    function updateCamera from (ori is Quat) to () {
        setCameraOrientation(ori);
        updateCameraPosition(ori);
        // Now we need to set the orientation in the camera
    }

    function updateCameraPosition from (ori is  Quat) to () {
        // Assume we aren't updating the camera's orientation
        // Move camera back from focal point
	try {
	    var tmp = Vec3.Z_AXIS;
	    tmp *= centerDistance;
	    tmp = ori * tmp;
	    setCameraPosition(focalPoint + tmp);
	} catch (e is java.lang.Throwable) {
	    e.printStackTrace();
	}
    }

    public function updateFocalPoint to () {
        // Compute the focal point based on the camera's current position
        var pos = getCameraPosition();
        var ori = getCameraOrientation();
        var negZ = Vec3.Z_AXIS;
        negZ *= -centerDistance;
        negZ = ori * negZ;
        focalPoint = pos + negZ;
    }

}
