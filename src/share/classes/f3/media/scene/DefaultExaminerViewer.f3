package f3.media.scene;
import f3.math.*;
import f3.math.LinearMath.*;
import java.lang.Math;

public class DefaultExaminerViewer extends ExaminerViewer {

    public var camera is PerspectiveCamera;
    
    override function getCameraOrientation to Quat 
    {
	quat(camera.rx, camera.ry, camera.rz);
    }

    override function getCameraPosition to Point3 
    {
	point(camera.tx, camera.ty, camera.tz);
    }

    override function setCameraOrientation from (ori is Quat) to () 
    {
        const angles = ori.toAngles();
        camera.rx = angles.x;
        camera.ry = angles.y;
        camera.rz = angles.z;
    }

    override function setCameraPosition from (pos is Point3) to () 
    {
        camera.tx = pos.x;
        camera.ty = pos.y;
        camera.tz = pos.z;
    }

    override function getCameraNearDistance to Number 
    {
        camera.near;
    }

    override function getCameraFarDistance to Number 
    {
        camera.far;
    }

    override function setCameraNearDistance from (n is Number) to () 
    {
        camera.near = n;
    }

    override function setCameraFarDistance from (n is Number) to () 
    {
        camera.far = n;
    }

    override function getCameraViewAllPosition from (bounds is Bounds) to Point3 
    {
        const halfWidth = bounds.extent.x;
        const halfHeight = bounds.extent.y;
        const halfDepth = bounds.extent.z;
        const radius = Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight + halfDepth * halfDepth);
        // Now figure out how far to move
        const minAngle = 
	    if (camera.heightAngle < camera.widthAngle) camera.heightAngle else camera.widthAngle;
        if (minAngle == 0.0) {
            return null;
        }
        // Required distance back from center of bounding sphere
        const dist = radius / Math.sin(Math.toRadians(minAngle / 2)) as Number;
        // Compute backoff vector from center
        var backoff = Vec3.Z_AXIS;
        backoff = getCameraOrientation() * backoff;
        backoff *= dist;
        const result = backoff + bounds.center;
	return result;
    }
}