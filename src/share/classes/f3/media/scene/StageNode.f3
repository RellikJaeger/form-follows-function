package f3.media.scene;
import f3.media.input.*;
import f3.math.LinearMath.*;
import f3.math.*;

function pot from (n is Integer) to Integer 
{
    var result = 2;
    while (result < n) {
        result *= 2;
    }
    return result;
}

public class StageNode is Shape2D.MeshNode2D, Stage, AbstractTexture, MouseInputHandler, Focusable {

    const _1 = observeKeyDown().subscribe(injectKeyDown);
    const _2 = observeKeyUp().subscribe(injectKeyUp);
    const _3 = observeKeyInput().subscribe(injectKeyInput);

    public const superSample is Integer = 2;

    override public function acceptFocus to Boolean 
    {
	if (getFocusedScene() <> null) {
	    Focusable.acceptFocus();
	} else {
	    Focusable.loseFocus();
	}
    }

    override public function loseFocus to Boolean {
	getFocusedScene().loseFocus();
	if (getFocusedScene() == null) { Focusable.loseFocus() };
	focused;
    }

    override public function onMouseDown from (event is MouseEvent) to ()  {
	injectMouseDown(convert(event));
        event.stopPropagation();
    }

    override public function onMouseUp from (event is MouseEvent) to ()  {
	injectMouseUp(convert(event));
        event.stopPropagation();
    }

    override public function onMouseWheel from (event is MouseWheelEvent) to () 
    {
        injectMouseWheel(convert(event));
        event.stopPropagation();
    }

    override public function onMouseMove from (event is MouseEvent) to ()  {
        injectMouseMove(convert(event));
        event.stopPropagation();
    }

    override public function onMouseDrag from (event is MouseEvent) to ()  {
	if (not containsPointer) {
	    injectMouseMove(convert(event));
	    event.stopPropagation();
	}
    }

    function convert from (e is MouseEvent) to MouseEvent
    {
       containingScene = e.scene;
       const e1 = MouseEvent {
            clickCount: e.clickCount;
            stage: this;
            altKey: e.altKey;
            ctrlKey: e.ctrlKey;
            shiftKey: e.shiftKey;
            metaKey: e.metaKey;
	    screenx: e.location.x + width/2.0;
	    screeny: -e.location.y + height/2.0;
            buttons: e.buttons;
        }
       //println("w={width}, h={height} {e} => {e1}");
       return e1;
    }

    var containingScene is Scene;

    function convert from (e is MouseWheelEvent) to MouseWheelEvent
    {
       MouseWheelEvent {
            clickCount: e.clickCount;
            stage: this;
            altKey: e.altKey;
            ctrlKey: e.ctrlKey;
            shiftKey: e.shiftKey;
            metaKey: e.metaKey;
	    screenx: e.location.x + width/2.0;
            screeny: e.location.y - height/2.0;
            buttons: e.buttons;
            scroll: e.scroll;
        }
    }
    
    var updateTime is Long;
    override function update 
    {
        const now = java.lang.System.currentTimeMillis();
        const elapsed = now - updateTime;
        updateTime = now;
        super.update();
        if (elapsed >= 16) {
            for (scene in content) scene.update();
            updateCursor();
        } else {
            //println("elapsed: {elapsed}");
        }
    }
    public var drawingSurface is AbstractTexture;
    public const factory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public const imageLoader is ImageLoader = the ImageLoader;
    var w = bind pot(width); 
    var h = bind pot(height);
    override var path = bind Shape2D.rect(factory, -width/2, -height/2, width, height, textureMatrix);

    var textureMatrix = bind getTextureMatrix(width, height, w, h);

    function getTextureMatrix from (width is Number, height is Number, w is Number, h is Number) to Mat4 {
        var r = scale(width / w, height / h);
        println("TEX MATRIX {width},{height} {w}, {h} => {r}");
        if (width == 0 or height == 0 or w == 0 or h == 0) return Mat4.<<1>>;
        return r;
    }
    override var gridFit = false;
    public var background is Color = Color.color(1, 1, 1, 0);
    override var paint = {
	const self = this;
	Shape2D.TexturePaint {
	    texture: self;
	}
    }
    override function getTextureId to Integer {
        drawingSurface.getTextureId();
    }
    override function getWidth to Integer { width }
    override function getHeight to Integer { height }

    public override function showPopupMenu from (x is Integer, y is Integer, menu is Menu) to () 
    {
        const x1 = x - width / 2.0;
        const y1 = -(y - height / 2.0);
        const pt = toSceneTransform * new Point3(x1, y1, 0);
        const screenPt = containingScene.camera.toScreen(pt);
        containingScene.stage.showPopupMenu(screenPt.x as Integer, screenPt.y as Integer, menu);
    }

    public override function showTooltip from (x is Integer, y is Integer, tooltip is String) to () 
    {
        const x1 = x - width / 2.0;
        const y1 = -(y - height / 2.0);
        const pt = toSceneTransform * new Point3(x1, y1, 0);
        const screenPt = containingScene.camera.toScreen(pt);
        containingScene.stage.showTooltip(screenPt.x as Integer, screenPt.y as Integer, tooltip);
    }
}