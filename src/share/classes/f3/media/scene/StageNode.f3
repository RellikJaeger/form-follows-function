package f3.media.scene;
import f3.media.input.*;

public class StageNode is Shape2D.MeshNode2D, Stage, AbstractTexture, MouseInputHandler, Focusable {

    const _1 = observeKeyDown().subscribe(injectKeyDown);
    const _2 = observeKeyUp().subscribe(injectKeyUp);
    const _3 = observeKeyInput().subscribe(injectKeyInput);

    override public function acceptFocus to Boolean 
    {
	if (getFocusedScene() <> null) {
	    Focusable.acceptFocus();
	} else {
	    Focusable.loseFocus();
	}
    }

    override public function loseFocus to Boolean {
	getFocusedScene().loseFocus();
	if (getFocusedScene() == null) { Focusable.loseFocus() };
	focused;
    }

    override public function onMouseDown from (event is MouseEvent) to ()  {
	injectMouseDown(convert(event));
        event.stopPropagation();
    }

    override public function onMouseUp from (event is MouseEvent) to ()  {
	injectMouseUp(convert(event));
        event.stopPropagation();
    }

    override public function onMouseWheel from (event is MouseWheelEvent) to () 
    {
        injectMouseWheel(convert(event));
        event.stopPropagation();
    }

    override public function onMouseMove from (event is MouseEvent) to ()  {
        injectMouseMove(convert(event));
        event.stopPropagation();
    }

    override public function onMouseDrag from (event is MouseEvent) to ()  {
	if (not containsPointer) {
	    injectMouseMove(convert(event));
	    event.stopPropagation();
	}
    }

    function convert from (e is MouseEvent) to MouseEvent
    {
       const e1 = MouseEvent {
            clickCount: e.clickCount;
            stage: this;
            altKey: e.altKey;
            ctrlKey: e.ctrlKey;
            shiftKey: e.shiftKey;
            metaKey: e.metaKey;
	    screenx: e.location.x + width/2.0;
	    screeny: -e.location.y + height/2.0;
            buttons: e.buttons;
        }
       //println("w={width}, h={height} {e} => {e1}");
       return e1;
    }

    function convert from (e is MouseWheelEvent) to MouseWheelEvent
    {
       MouseWheelEvent {
            clickCount: e.clickCount;
            stage: this;
            altKey: e.altKey;
            ctrlKey: e.ctrlKey;
            shiftKey: e.shiftKey;
            metaKey: e.metaKey;
	    screenx: e.location.x + width/2.0;
            screeny: e.location.y - height/2.0;
            buttons: e.buttons;
            scroll: e.scroll;
        }
    }

    override function update 
    {
        super.update();
	updateCursor();
    }
    public var drawingSurface is AbstractTexture;
    public const factory is Shape2D.Path2DFactory = the Shape2D.Path2DFactory;
    public const imageLoader is ImageLoader = the ImageLoader;
    override var path = bind Shape2D.rect(factory, -width/2, -height/2, width, height);
    public var background is Color = Color.TRANSPARENT;
    override var paint = {
	const self = this;
	Shape2D.TexturePaint {
	    color: bind background;
	    texture: self;
	}
    }
    override function getTextureId to Integer {
        drawingSurface.getTextureId();
    }
    override function getWidth to Integer { width }
    override function getHeight to Integer { height }
}