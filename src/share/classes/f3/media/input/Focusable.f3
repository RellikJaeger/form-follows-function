package f3.media.input;
import f3.util.*;
import f3.media.scene.*;

public interface Focusable is Focuser, KeyboardFocusTarget {
    override function getTargetOfFocus to Focusable { this }
    public readonly var focused is Boolean;
    public function acceptFocus to Boolean { focusedSubject.onNext(focused = true); focused }
    public function loseFocus to Boolean { focusedSubject.onNext(focused = false); focused }
    public function getKeyboardInputHandler to KeyboardInputHandler 
    {
	if (this is KeyboardInputHandler) {
            return this as KeyboardInputHandler;
        }
        return null;
    }

    public const keyDown is Subject of KeyboardEvent = Subject of KeyboardEvent {};
    public const keyUp is Subject of KeyboardEvent = Subject of KeyboardEvent {};
    public const keyInput is Subject of KeyboardEvent = Subject of KeyboardEvent {};

    public const focusedSubject is Subject of Boolean;

    override public function observeKeyDown to Observable of KeyboardEvent 
    {
        keyDown;
    }
    override public function observeKeyUp to Observable of KeyboardEvent 
    {
        keyUp;
    }

    override public function observeKeyInput to Observable of KeyboardEvent 
    {
        keyInput;
    }

    override public function observeFocused to Observable of Boolean 
    {
        focusedSubject;
    }

    var attachment is Disposable;

    public function attachTo from (n is Node) to ()
    {
        attachment.dispose();
        attachment = n.observeMouseDown().subscribe(function from (e is MouseEvent) to () {
                e.scene.setFocus(this);
            });
    }
}