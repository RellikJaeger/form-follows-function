package f3.util;
import f3.util.Observer.DefaultObserver;
import f3.lang.*;

public interface Observable of a, is org.f3.runtime.Monad of (Observable, a) 
{
    public var debugString is String;

    public function toRef to ConstRef of a 
    {
        AbstractConstRef of a {
            var last is a;
            override function get to a 
            {
                return last
            }
            var disp = subscribe(function from (x is a) to () {
                    last = x;
                });
        }
    }

    public function prepend from (x is a) to Observable of a 
    {
        observe(x).followedBy(this);
    }

    public function count to Observable of Integer 
    {
        fold(0, function from (n is Integer, _ is a) to Integer { n + 1 })
    }

    public function or of b from (xs is Observable of b) to Observable of <a, b> {
        const self = this;
        DefaultObservable of <a, b> {
            override function subscribe from (ys is Observer of <a, b>) to Disposable
            {
                var completed = 0;
                const d1 is Disposable = self.subscribe(DefaultObserver of a {
                        override function onNext from (x is a) to ()
                        {
                            ys.onNext(Former of (a, b)(x));
                        }
                        override function onCompleted to () {
                            if (++completed == 2) {
                                ys.onCompleted();
                            }
                        }
                        override function onError from (e is java.lang.Exception) to ()
                        {
                            if (completed < 2) {
                                completed = 2;
                                ys.onError(e);
                                d2.dispose();
                            }
                        }
                    });
                const d2 is Disposable = xs.subscribe(DefaultObserver of b {
                        override function onNext from (y is b) to ()
                        {
                            ys.onNext(Latter of (a, b)(y));
                        }
                        override function onCompleted to () {
                            if (++completed == 2) {
                                ys.onCompleted();
                            }
                        }
                        override function onError from (e is java.lang.Exception) to ()
                        {
                            if (completed < 2) {
                                completed = 2;
                                ys.onError(e);
                                d1.dispose();
                            }
                        }
                    });
                Disposable {
                    override function dispose {
                        d1.dispose();
                        d2.dispose();
                    }
                }
            }
        }
    }

    public function latest from (initialValue is a) to f3.lang.ConstRef of a 
    {
        const self = this;
        Sampler of a {
            last: initialValue;
            override var subscription = self.subscribe(this);
        }
    }

    public function toggle from (p is Ref of Boolean) to Disposable
    {
	accumulate(p.get(),
                   |x, _| not x
		   /*function from (x is Boolean, _ is a) to Boolean
		   {
		       not x;
                       }*/
                   ).subscribe(p);
    }

    public function filter from (p is function from a to Boolean) to Observable of a
    {
        const self = this;
        DefaultObservable of a {
            override function subscribe from (y is Observer of a) to Disposable {
                self.subscribe(DefaultObserver of a {
                        override function onNext from (x is a) to () {
                            if (p(x)) {
                                //println("filter succeeded on {x}");
                                y.onNext(x);
                            } else {
                                //println("filter failed on {x}");
                            }
                        }
                        override function onError from (e is java.lang.Exception) to ()
                        {
                            y.onError(e);
                        }
                        override function onCompleted from () to () 
                        {
                            y.onCompleted();
                        }
                    });
            }
        }
    }

    public function repeat from (repeatCount is Integer) to Observable of a 
    {
        const self = this;
        DefaultObservable of a {
            override function subscribe from (y is Observer of a) to Disposable {
                var d is Disposable = 
                    self.subscribe(DefaultObserver of a {
                            var n = repeatCount-1;
                            override function onNext from (x is a) to ()
                            {
                                y.onNext(x);
                            }
                            override function onCompleted to ()
                            {
                                if (n-- >= 0) {
                                    d.dispose();
                                    d = self.subscribe(this);
                                } else {
                                    y.onCompleted();
                                }
                            }
                            override function onError from (e is java.lang.Exception) to ()
                            {
                                n = -1;
                                y.onError(e);
                            }
                        });
                Disposable {
                    override function dispose {
                        d.dispose();
                    }
                }
            }
        }
    }

    public function subscribe 
	from (p is Ref of a) 
	to Disposable 
    {
	subscribe(p.set);
    }

    public function subscribe of b 
	from (f is function from a to b) 
	to Disposable 
    {
	subscribe(DefaultObserver of a 
		  {
		      override function onNext from (x is a) to ()
		      {
			  f(x);
		      }
		  });
    }

    /*
    public function subscribe of b 
	from (this is Observable of (()),
	      f is function from () to b) 
	to Disposable 
    {
	subscribe(DefaultObserver of (()) 
		  {
		      override function onNext from (x is ()) to ()
		      {
			  f();
		      }
		  });
    }
    */

    public abstract function subscribe from (observer is Observer of a) to Disposable;

    override public function map of b from (f is function from a to b) to Observable of b 
    {
	const self = this;
	DefaultObservable of b 
	{
	    override function subscribe from (observer is Observer of b) to Disposable 
	    {
		self.subscribe(DefaultObserver of a {
			override public function onNext from (x is a) to () 
			{
			    const y = f(x);
			    observer.onNext(y);
			}
			override public function onError from (e is java.lang.Exception) to () 
			{
			    observer.onError(e);
			}
			override public function onCompleted from () to () 
			{
			    observer.onCompleted();
			}
		    });
	    }
	}
    }

    // Returns an Observable whose flatmap acts like "Switch" in rx (i.e subscribes to the latest observed Observable)

    public function observeLatest to Observable of a 
    {
        const self = this;
        DefaultObservable of a {
            override function subscribe from (observer is Observer of a) to Disposable
            {
                self.subscribe(observer);
            }
            override function flatmap of b from (f is function from a to Observable of b) to Observable of b 
            {
                subscribeToLatest(map(f));
            }
        }
    }

    public function flatmap of b 
        from (f is function from a to Observable of b) 
        to Observable of b 
    {
	const self = this;
	DefaultObservable of b 
	{
            override function toString to String {
                "flatmap observable {f}";
            }
	    override function subscribe from (observer is Observer of b) to Disposable 
	    {
                var j = 0;
                var alive = 0;
                var mainCompleted is Boolean;
                var mainErrored is Boolean;
                var queue is java.util.LinkedList of Observable of b = new java.util.LinkedList of Observable of b;
                var d1 is Disposable;
		var d is Disposable = self.subscribe(DefaultObserver of a {
                        override function toString to String {
                            "flatmap observer {f} for {observer}"
                        }
                        function terminateWithError(e is java.lang.Exception) {
                            if (not mainCompleted) {
                                mainCompleted = true;
                                d1.dispose();
                                d1 = null;
                                d.dispose();
                                d = null;
                                observer.onError(e);
                            }
                        }

			override public function onNext from (x is a) to () 
			{
                            const ob = f(x);
                            if (queue.size() == 0) {
                                performNext(ob);
                            } else {
                                queue.addLast(ob);
                            }
                        }

                        function performNext from (observable is Observable of b) to () {
                            const j1 = j;
                            //println("FLATMAP {j1} {queue.size()} {observable} mainCompleted {mainCompleted}");
                            //java.lang.Thread.currentThread().dumpStack();
                            j++;
			    d1 = observable.subscribe(DefaultObserver of b {
                                    override function toString to String {
                                        "flatmap {f} / {observable}";
                                    }
                                    override function onNext from (y is b) to () {
                                        if (mainCompleted or mainErrored) {
                                            d1.dispose();
                                            return;
                                        }
                                        observer.onNext(y);
                                    }
                                    override function onError from (e is java.lang.Exception) to () {
                                        terminateWithError(e);
                                    }
                                    override function onCompleted from () to () {
                                        d1 = null;
                                        //println("FLATMAP COMPLETED {j1}");
                                        if (queue.size() > 0) {
                                            const fx = queue.removeFirst();
                                            //println("PERFORMING NEXT AFTER COMPLETION OF {j1}");
                                            performNext(fx);
                                        } else {
                                            if (mainCompleted and not mainErrored) {
                                                observer.onCompleted();
                                            }
                                        }
                                    }
                                });
			}
			override public function onError from (e is java.lang.Exception) to () 
			{
                            mainErrored = true;
			    terminateWithError(e);
			}
			override public function onCompleted from () to () 
			{
                            if (not mainCompleted) {
                                //println("main completed {this}");
                                mainCompleted = true;
                                if (d1 == null and queue.size() == 0) {
                                    observer.onCompleted();
                                }
                            }
			}
		    });
		Disposable {
                    override function toString to String {
                        "flatmap disposal";
                    }
		    override function dispose to () 
		    {
                        d.dispose();
                        d1.dispose();
		    }
		}
	    }
	}
    }

    public function terminateWith from (sig is Observable of a) to Observable of a 
    {
        const self = this;
        DefaultObservable of a {
	    override function subscribe from (ob is Observer of a) to Disposable {
                const sub1 is Disposable = self.subscribe(DefaultObserver of a {
                        override function onNext from (x is a) to ()
                        {
                            //println("NOT TERMINATED {x}");
                            ob.onNext(x);
                        }
                        override function onCompleted from () to ()
                        {
                            d.dispose();
                            ob.onCompleted();
                        }
                        override function onError from (x is java.lang.Exception) to ()
                        {
                            d.dispose();
                            ob.onError(x);
                        }
                    });
                const d is Disposable = sig.subscribe(DefaultObserver of a {
                        override function onNext from (x is a) to ()
                        {
                            //println("TERMINATE WITH {x}");
                            ob.onNext(x);
                            ob.onCompleted();
                            sub1.dispose();
                            d.dispose();
                        }
                        override function onCompleted from () to ()
                        {
                            sub1.dispose();
                            ob.onCompleted();
                        }
                        override function onError from (x is java.lang.Exception) to ()
                        {
                            sub1.dispose();
                            ob.onError(x);
                        }
                    });
                Disposable {
                    override function dispose to ()
                    {
                        sub1.dispose();
                        d.dispose();
                    }
                }
            }
        }
    }

    public function takeUntil of b (sig is Observable of b) to Observable of a 
    {
	until(sig, true);
    }

    public function dropUntil of b (sig is Observable of b) to Observable of a 
    {
	until(sig, false);
    }

    function until of b (sig is Observable of b, taking is Boolean) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (ob is Observer of a) to Disposable {
		var enabled is Boolean = taking;
		const sub1 is Disposable = self.subscribe(Observer of a {
                        override function toString to String {
                            "take until {taking} self {self}"
                        }
			override public function onNext from (x is a) to () 
			{
			    if (enabled) {
                                //println("TAKING {x}");
				ob.onNext(x)
			    }
			}
			override public function onError from (e is java.lang.Exception) to () 
			{
                            unSub2();
			    ob.onError(e);
			}
			override public function onCompleted from () to () 
			{
                            unSub2();
			    ob.onCompleted();
			}
		    });
		var sub2 is Disposable;
		const unSub2 = function from () to () {
		    if (sub2 <> null) {
			sub2.dispose();
		    }
		    sub2 = null;
		}
		sub2 = sig.subscribe(DefaultObserver of b {
                        override function toString to String {
                            "take until {taking} {sig}"
                        }
			override public function onNext from (x is b) to () {
			    enabled = not taking;
                            if (taking) {
                                //println("{this}: DONE TAKING due to {x}");
                                ob.onCompleted();
                                sub1.dispose();
                            }
			    unSub2();
			}
			override public function onError from (e is java.lang.Exception) to () {
			    unSub2();
			}
			override public function onCompleted from () to () {
			    unSub2();
			}
		    });
		Disposable {
                    override function toString to String {
                        "take until disposal";
                    }
		    override function dispose {
			sub1.dispose();
			sub2.dispose();
		    }
		}
	    }
	}
    }

    public function take from (n is Integer) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (observer is Observer of a) to Disposable {
                //println("TAKE {n} subscribing {observer}");
		var d is Disposable = self.subscribe(DefaultObserver of a {
			var taken = 0;
			var completed = false;
			override function onNext from (x is a) to () {
			    if (++taken <= n) {
				observer.onNext(x);
			    }
			    if (not completed) {
				if (completed = (taken == n)) {
				    observer.onCompleted();
                                    ////println("TAKE {n} FINISHED");
                                    d.dispose();
                                    d = null;
				}
			    }
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    observer.onError(e);
			}
			override function onCompleted from () to ()
			{
			    if (not completed) {
				completed = true;
				observer.onCompleted();
			    }
			}
		    });
                Disposable {
                    override function dispose to () 
                    {
                        d.dispose();
                        d = null;
                    }
                }
	    }
	}
    }

    public function drop from (n is Integer) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (observer is Observer of a) to Disposable {
		self.subscribe(Observer of a {
			var pos = 0;
			override function onNext from (x is a) to () {
			    if (pos == n) {
				observer.onNext(x);
			    } else pos++;
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    observer.onError(e);
			}
			override function onCompleted from () to ()
			{
			    observer.onCompleted();
			}
		    });
	    }
	}
    }

    public function followedBy from (xs is Observable of a) to Observable of a 
    {
	take(1).concat(xs);
    }

    public function concat from (xs is Observable of a) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (observer is Observer of a) to Disposable {
		var d2 is Disposable;
		var d1 is Disposable = self.subscribe (Observer of a {
			override function onNext from (x is a) to () {
			    observer.onNext(x);
			}
			override function onError from (e is java.lang.Exception) to ()
			{
                            d1 = null;
			    observer.onError(e);
			}
			override function onCompleted from () to ()
			{
                            //println("CONCAT FINISHED FIRST");
                            d1 = null;
			    d2 = xs.subscribe(observer);
			}
		    });
		Disposable {
		    override function dispose {
			d1.dispose();
			d2.dispose();
		    }
		}
	    }
	}
    }

    public function merge from (xs is Observable of a) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (observer is Observer of a) to Disposable {
		const ob = Observer of a {
		    var completed is Integer = 0;
		    override function onNext from (x is a) to () {
                        //println("FROM MERGE {x}");
			if (completed < 2) {
			    observer.onNext(x);
			}
		    }
		    override function onError from (e is java.lang.Exception) to ()
		    {
                        if (completed < 2) {
                            completed = 2;
                            observer.onError(e);
                        }
		    }
		    override function onCompleted from () to ()
		    {
                        ++completed;
                        //println("MERGE COMPLETED {completed}");
			if (completed == 2) {
			    observer.onCompleted();
			}
		    }
		}
		const d1 = self.subscribe(ob);
		const d2 = xs.subscribe(ob);
		Disposable {
		    override function dispose {
                        ob;
			d1.dispose();
			d2.dispose();
		    }
		}
	    }
	}
    }

    public function buffer from (duration is Duration) to Observable of a 
    {
	buffer(Integer.MAX_VALUE, duration);
    }

    public function buffer from (count is Integer) to Observable of a 
    {
	buffer(count, Duration.INDEFINITE);
    }

    public function buffer from (bufferSize is Integer, duration is Duration) to Observable of a 
    {
	const self = this;
	DefaultObservable of a {
	    override function subscribe from (observer is Observer of a) to Disposable 
	    {
		var xs is (..a)[];
		var expiry is Duration = 1ms * java.lang.System.currentTimeMillis() + duration;
		const flush = function from (force is Boolean) to () 
		{
		    if (not force) {
			const now = 1ms * java.lang.System.currentTimeMillis();
			if (expiry < now and not force) {
			    return;
			}
			expiry = now + duration;
		    }
		    const j = if (force) then xs.size() else bufferSize;
		    const batch = xs[0..<j];
		    xs[0..<j] = [];
		    for (x in batch) {
			observer.onNext(x);
		    }
		}
		self.subscribe(Observer of a {
			override function onNext from (x is a) to () {
			    insert x into xs;
			    flush(false);
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    flush(true);
			    observer.onError(e);
			}
			override function onCompleted from () to ()
			{
			    flush(true);
			    observer.onCompleted();
			}
		    });
	    }
	}
    }
    /*
    public function zipLatestTo of (b1, c1)
        from (xs is Observable of b1, 
              f is function from (a, b1) to c1) 
        to Observable of c1 
    {
        xs.zipLatestFrom(this, f.flip());
    }
    
    public function zipLatestFrom of (b, c)
        from (xs is Observable of b, 
              f is function from (a, b) to c) 
        to Observable of c 
    {
        ZipLatestFrom of (c, a, b) {
            self: this;
            xs: xs;
            f: f;
        }
    }
    */

    public function zip of b 
	from (xs is Observable of b) to
	Observable of ( (a, b) )
    {
	zip(xs, function from (x is a, y is b) to (a, b) { (x, y) })
    }

    public function zip of (b, c) 
	from (xs is Observable of b, 
	      f is function from (a, b) to c) 
	to Observable of c 
    {
	const self = this;
	DefaultObservable of c {
	    var ys is (..a)[];
	    var zs is (..b)[];
	    var completed = 0;
	    override function subscribe from (observer is Observer of c) to Disposable {
		function flush {
		    if (completed < 2) {
			const j = java.lang.Math.min(ys.size(), zs.size());
			const left = ys[0..<j];
			const right = zs[0..<j];
			ys[0..<j] = [];
			zs[0..<j] = [];
			for (i in [0..<j]) {
			    observer.onNext(f(left[i], right[i]));
			}
		    }
		}
		function err from (e is java.lang.Exception) to () {
		    completed = 2;
		    observer.onError(e);
		}
		function complete {
		    completed++;
                    if (completed == 2) {
                        observer.onCompleted();
                    }
		}
		const d1 = self.subscribe(DefaultObserver of a {
			override function onNext from (x is a) to () {
			    if (completed < 2) {
				insert x into ys;
				flush();
			    }
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    if (completed < 2) {
				err(e);
			    }
			}
			override function onCompleted from () to ()
			{
			    if (completed < 2) {
                                complete();
                            }
			}
		    });
		const d2 = xs.subscribe(DefaultObserver of b {
			override function onNext from (x is b) to () {
			    if (completed < 2) {
				insert x into zs;
				flush();
			    }
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    if (completed < 2) {
				err(e);
			    }
			}
			override function onCompleted from () to ()
			{
			    if (completed < 2) {
				complete();
			    }
			}
		    });
		Disposable {
		    override function dispose {
			d1.dispose();
			d2.dispose();
		    }
		}
	    }
	}
    }

    public function accumulate of b 
	from (z is b, f is function from (b, a) to b) 
	to Observable of b 
    {
	fold(z, f)
    }

    public function fold of b 
	from (z is b, f is function from (b, a) to b) 
	to Observable of b 
    {
	const self = this;
	DefaultObservable of b {
	    override function subscribe from (observer is Observer of b) to Disposable 
            {
		self.subscribe(Observer of a {
			var r = z;
			override function onNext from (x is a) to () 
                        {
			    observer.onNext(r = f(r, x));
			}
			override function onError from (e is java.lang.Exception) to ()
			{
			    observer.onError(e);
			}
			override function onCompleted from () to ()
			{
			    observer.onCompleted();
			}
		    });
	    }
	}
    }

    public function always of b from (x is b) to Observable of b 
    {
	map(|ignored| x);
    }

    public function apply from () to Observable of (()) 
    {
	always(())
    }

    public function partition from (f is function from a to Boolean) 
	to (Observable of a, Observable of a)
    {
	var d0 is Disposable;
	var d1 is Disposable;
	const y = Subject of a {
	    override function onNext from (x is a) to () {
		if (f(x)) super.onNext(x);
	    }
	    override function onError from (e is java.lang.Exception) to ()
	    {
		d0.dispose();
		super.onError(e);
	    }
	    override function onCompleted from () to ()
	    {
		d0.dispose();
		super.onCompleted();
	    }
	};
	const n = Subject of a {
	    override function onNext from (x is a) to () {
		if (f(x)) super.onNext(x);
	    }
	    override function onError from (e is java.lang.Exception) to ()
	    {
		d1.dispose();
		super.onError(e);
	    }
	    override function onCompleted from () to ()
	    {
		d1.dispose();
		super.onCompleted();
	    }
	}
	d0 = subscribe(y);
	d1 = subscribe(n);
	(y, n)
    }

}

public abstract class DefaultObservable of a is Observable of a //, org.f3.runtime.Monad of (Observable, a) 
{
}
/*
class ZipLatestFrom of (c, a, b) is DefaultObservable of c {
    public const self is Observable of a;
    public const xs is Observable of b;
    public const f is function from (a, b) to c;
    var latest_b is b;
    const d1 = xs.subscribe(DefaultObserver of b {
            override function onNext from (x is b) to ()
            {
                latest_b = x;
            }
        });
    override function subscribe from (z is Observer of c) to Disposable 
    {
        self.subscribe(DefaultObserver of a {
                onError: z.onError;
                onCompleted: z.onCompleted;
                override function onNext from (x is a) to ()
                {
                    z.onNext(f(x, latest_b));
                }
            });
    }
}
*/

public function observe of a
    from (xs is (..a)[]) 
    to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe 
	    from (observer is Observer of a) 
	    to Disposable 
	{
	    foreach (x in xs) {
		observer.onNext(x);
	    }
	    observer.onCompleted();
	    Disposable.empty();
	}
    }
}

public function observe of (f is org.f3.runtime.Functor, a) 
    from (xs is org.f3.runtime.Functor of (f, a)) 
    to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe from (observer is Observer of a) to Disposable 
	{
	    foreach (x in xs) {
		observer.onNext(x);
	    }
	    observer.onCompleted();
	    Disposable.empty();
	}
    }
}

public function observe of (class F of _, a) 
    from (xs is F of a) 
    to Observable of a 
    with (the Functor of F)
{
    DefaultObservable of a {
	override public function subscribe from (observer is Observer of a) to Disposable 
	{
	    foreach (x in xs) {
		observer.onNext(x);
	    }
	    observer.onCompleted();
	    Disposable.empty();
	}
    }
}

public function return of a from (x is a) to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe from (observer is Observer of a) to Disposable 
	{
	    observer.onNext(x);
	    observer.onCompleted();
	    Disposable.empty();
	}
    }
}

public function error of a 
       from (e is java.lang.Exception) 
       to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe 
	from (observer is Observer of a) 
	to Disposable 
	{
	    observer.onError(e);
	    Disposable.empty();
	}
    }
}

public function never of a to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe from (observer is Observer of a) to Disposable 
	{
	    Disposable.empty();
	}
    }
}

public function empty of a to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe from (observer is Observer of a) to Disposable 
	{
	    observer.onCompleted();
	    Disposable.empty();
	}
    }

}

/*
public function every from (dur is Duration) to Observable of Integer {

    DefaultObservable of Integer {
	public override function subscribe from (observer is Observer of Integer) to Disposable {
	    var nextTime is Duration;
	    var counter = 0;
	    const timeline = f3.media.scene.Timeline {
		override function setPlayhead from (t is Duration) to () {
		    if (nextTime == 0s) nextTime = t;
		    if (not paused) {
			if (nextTime <= t) {
			    nextTime += dur;
			    observer.onNext(counter++);
			}
		    }
		}
	    }
	    Disposable {
		override function dispose {
		    timeline.paused = true;
		}
	    }
	}
    }
}

*/

class Println of a is DefaultObserver of a
{
    override function onNext from (x is a) to () {
	println(x);
    }
}

function Println of a to Println of a 
{
    Println of a {}
}

class SwitchToLatest of a is Observer of Observable of a
{
    public const observer is Observer of a;
    var target is Disposable;
    override public function onNext from (x is Observable of a) to () 
    {
        target.dispose();
        target = x.subscribe(observer);
    }
    override public function onError from (e is java.lang.Exception) to () 
    {
        observer.onError(e);
    }
    override public function onCompleted from () to () 
    {
        observer.onCompleted();
    }
}

public function subscribeToLatest of a from (self is Observable of Observable of a) to Observable of a 
{
    DefaultObservable of a 
    {
        override function subscribe from (observer is Observer of a) to Disposable 
        {
            self.subscribe(SwitchToLatest of a 
                           {
                               observer: observer;
                           })
        }
    }
}


public function run 
{
    const j =
	foreach (x in Observable.return(1), y in Observable.return(2)) x + y;
    const d = j.subscribe(Println of Integer());
    d.dispose();
}

