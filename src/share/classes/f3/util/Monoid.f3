package f3.util;

public abstract class Monoid of a
{
    public const zero is a;

    abstract public function add from (x is a, y is a) to a;

    public function append from (x is a) to function from a to a 
    {
	add.apply(x)
    }

    public function prepend from (x is a) to function from a to a 
    {
	add.flip().apply(x)
    }

    public function dual to Monoid of a {
	const self = this;
	Monoid of a {
	    zero: self.zero;
	    override function add from (x is a, y is a) to a {
		self.add(y, x)
	    }
	}
    }
}


public interface Reducer of (a, b) 
{
    public const monoid is Monoid of b = the Monoid of b;
    public function append from (x is a, y is b) to b 
    {
	monoid.add(invoke(x), y)
    }
    public function prepend from (x is b, y is a) to b 
    {
	monoid.add(x, invoke(y))
    }
    public abstract function invoke from (x is a) to b;
}



