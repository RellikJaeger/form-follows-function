package f3.util;

public interface Observer of a 
{
    public function onNext from (x is a) to () {}
    public function onError from (e is java.lang.Exception) to () {}
    public function onCompleted from () to () {}
}

public abstract class DefaultObserver of a is Observer of a 
{
}

const cofunctor = Cofunctor of Observer {

    override public function comap of (a, b)
	from (xs is Observer of a,
	      f is function from b to a) 
        to Observer of b
    {
        DefaultObserver of b {
	    override function onNext from (x is b) to ()
	    {
		xs.onNext(f(x))
	    }
	    onError: xs.onError;
	    onCompleted: xs.onCompleted;
	}	
    }

}




