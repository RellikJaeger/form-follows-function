package f3.util;
import f3.lang.*;

public class Subject of a is Observable of a, Observer of a 
{
    public var debug is String;

    override function toString to String {
        "{debug}{super.toString}"
    }

    var observers is java.util.Map of (Observer of a, ());

    public readonly var last is a;

    override public function toRef to Ref of a 
    {
        AbstractRef of a {
            override function get to a 
            {
                last
            }
            override function set from (x is a) to ()
            {
                onNext(x)
            }
        }
    }

    public override function onNext from (x is a) to ()
    {
        if (debug <> null) println("{debug} subject on next {x}, obs={observers}");
        last = x;
	if (observers <> null) {
            beginFlush();
	    for (ob in observers.keySet()) {
		ob.onNext(x);
            }
            endFlush();
        }
    }

    public override function onError from (x is java.lang.Exception) to ()
    {
	if (observers <> null) {
            beginFlush();
	    for (ob in observers.keySet()) {
		ob.onError(x);
            }
            endFlush();
        }
    }

    public override function onCompleted from () to ()
    {
	if (observers <> null) {
            beginFlush();
	    for (ob in observers.keySet()) {
		ob.onCompleted()
            }
            endFlush();
        }
    }

    public function bindTo from (xs is Subject of a) to Disposable
    {
        const self = this;
        const sub1 = subscribe(function from (x is a) to () {
                if (x <> xs.last) {
                    xs.onNext(x);
                }
            });
        const sub2 = xs.subscribe(function from (x is a) to () {
                if (x <> self.last) {
                    self.onNext(x);
                }
            });
        Disposable {
            override function dispose to ()
            {
                sub1.dispose();
                sub2.dispose();
            }
        }
    }

    public function bindTo of b 
        from (xs is Subject of b, f is function from a to b, g is function from b to a) to Disposable
    {
        const self = this;
        const sub1 = subscribe(function from (x is a) to () {
                const y = f(x);
                if (y <> xs.last) {
                    xs.onNext(y);
                }
            });
        const sub2 = xs.subscribe(DefaultObserver of b {
                override function onNext from (x is b) to () {
                    const y = g(x);
                    if (y <> self.last) {
                        self.onNext(y);
                    }
                }
            });
        Disposable {
            override function dispose to ()
            {
                sub1.dispose();
                sub2.dispose();
            }
        }
    }

    var flushing is Boolean;
    var todo is (function from () to ())[];

    function addSubscriber from (x is Observer of a) to ()
    {
        if (flushing) {
            insert function {
                observers.put(x, null);
            } into todo;
        } else {
            observers.put(x, null);
        }
    }

    function removeSubscriber from (x is Observer of a) to ()
    {
        if (flushing) {
            insert function {
                observers.remove(x);
            } into todo;
        } else {
            observers.remove(x);
        }
    }

    function beginFlush to ()
    {
        flushing = true;
    }

    function endFlush to () 
    {
        var xs = todo;
        todo = [];
        for (x in xs) x();
        flushing = false;
    }

    public override function subscribe from (x is Observer of a) to Disposable 
    {
	if (observers == null) {
	    observers = new java.util.WeakHashMap of (Observer of a, ());
	}
        if (debug <> null) {
            println("{debug} subscribe {x}, obs={observers}"); 
        }
        //java.lang.Thread.currentThread().dumpStack();
        addSubscriber(x);
        if (debug <> null) {
            println("{debug} (post) subscribe {x}, obs={observers}"); 
        }
	Disposable {
            var disposed is Boolean;
            override function finalize to ()
            {
                if (not disposed) {
                    println("finalizing {this}");
                }
            }
	    override function dispose
	    {
                if (not disposed) {
                    disposed = true;
                    if (debug <> null) {
                        println("{debug} DISPOSING {x}");
                    }
                    removeSubscriber(x);
                } else {
                    println("MULTIPLY DISPOSED {this}");
                    java.lang.Thread.currentThread().dumpStack();
                }
	    }
	}
    }

}
