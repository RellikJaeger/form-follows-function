package f3.util;
import org.f3.runtime.Functor;
import org.f3.runtime.Monad;

// Skew binomial heap from Okasaki

class Node of a
{
    const compare is function from (a, a) to Integer;
    const r is Integer;
    const x is a;
    const xs is a[];
    const c is (Node of a)[];

    override function toString to String 
    {
	"(r={r}, x={x}, xs={xs}, c={c})";
    }

    function rank to Integer { r }
    function root to a { x }

    function link from (t2 is Node of a) to Node of a 
    {
	if (compare(x, t2.x) <= 0) {
	    Node of a {
		compare: compare;
		r: r + 1;
		x: x;
		xs: xs;
		c: [t2, c];
	    }
	} else {
	    Node of a {
		compare: compare;
		r: r + 1;
		x: t2.x;
		xs: t2.xs;
		c: [this, t2.c];
	    }
	}
    }

    function skewLink 
	from (x is a, 
	      t2 is Node of a) 
	to Node of a
    {
	const t1 = this;
	const n = t1.link(t2);
	const r  = n.r;
	const y  = n.x;
	const ys = n.xs;
	const c  = n.c;
	if (compare(x, y) <= 0) {
	    Node of a {
		compare: compare;
		r:  r;
		x:  x;
		xs: [y, ys];
		c:  c
	    }
	} else {
	    Node of a {
		compare: compare;
		r:  r;
		x:  y;
		xs: [x, ys];
		c:  c;
	    }
	}
    }

    function insTree from (ts is (Node of a)[]) to (Node of a)[]
    {
	if (ts == []) 
	    then [this] 
	    else {
		const t1 = this;
		const t2 = ts[0];
		if (t1.rank() < t2.rank()) 
		    then 
			[t1, t2, ts[1..]] 
		    else 
			t1.link(t2).insTree(ts[1..]);
	    }
    }
}

function mergeTrees of a
    from (ts1 is (Node of a)[],
	  ts2 is (Node of a)[]) 
    to (Node of a)[]
{
    if (ts2 == []) 
	then ts1
    else if (ts1 == [])
	then ts2
    else {
	const t1 = ts1[0];
	const t2 = ts2[0];
	if (t1.rank() < t2.rank())
	    then [t1, mergeTrees(ts1[1..], ts2)]
        else if (t2.rank() < t1.rank()) 
	    then [t2, mergeTrees(ts1, ts2[1..])]
        else t1.link(t2).insTree(mergeTrees(ts1[1..], ts2[1..]))
    }
}

function normalize of a
    from (ts is (Node of a)[])
    to (Node of a)[]
{
    if (ts == []) then ts else ts[0].insTree(ts[1..]);
}

function ins of a
    from (compare is function from (a, a) to Integer,
	  x is a,
	  ts is (Node of a)[])
    to (Node of a)[]
{
    if (ts.size() >= 2) {
	const t1 = ts[0];
	const t2 = ts[1];
	const rest = ts[2..];
	if (t1.rank() == t2.rank()) {
	    return [t1.skewLink(x, t2), rest];
	}
    }
    return [Node of a {compare: compare, x: x}, ts]
}

function merge of a
    from (ts1 is (Node of a)[],
	  ts2 is (Node of a)[])
    to (Node of a)[]
{
    mergeTrees(normalize(ts1), normalize(ts2))
}

class Split of a {
    const first is Node of a;
    const second is (Node of a)[];
}

function split of a
    from (x is Node of a,
	  xs is (Node of a)[]) 
    to Split of a 
{
    Split of a 
    {
	first: x;
	second: xs;
    }
}

function removeMinTree of a
    from (compare is function from (a, a) to Integer, ts is (Node of a)[])
    to Split of a
{
    if (ts == []) {
	throw new java.lang.RuntimeException("empty");
    }
    if (ts.size() == 1) 
	then split(ts[0], ts[1..])
    else {
	const t1 = ts[0];
	const ts1 = ts[1..];
	const p = removeMinTree(compare, ts1);
	const t2 = p.first;
	const ts2 = p.second;
	if (compare(t1.root(), t2.root()) <= 0) 
	    then split(t1, ts1)
	else 
	    split(t2, [t1, ts2])
    }
}

public class Heap of a {
       
    const compare is function from (a, a) to Integer;

    const ts is (Node of a)[];
    public const length = 0;

    public function isEmpty to Boolean 
    {
	length == 0;
    }

    public function foldLeft of b
	from (z is b, 
	      f is function from (b, a) to b) 
	to b
    {
	var r = z;
	var h = this;
	while (not h.isEmpty()) {
	    r = f(r, h.getMin());
	    h = h.deleteMin();
	}
	return r;
    }

    public function insert from (x is a) to Heap of a 
    {
	Heap of a 
	{
	    compare: compare;
	    length: length+1;
	    ts: ins(compare, x, ts)
	}
    }

    public function getMin to a 
    {
	removeMinTree(compare, ts).first.root()
    }

    function insertAll 
	from (xs is a[],
	      ts is (Node of a)[])
	to (Node of a)[]
    {
	if (xs == []) then ts else insertAll(xs[1..], ins(compare, xs[0], ts));
    }

    public function deleteMin to Heap of a 
    {
	if (isEmpty()) {
	    throw new java.lang.RuntimeException("empty");
	}
	const p = removeMinTree(compare, ts);
	const n = p.first;
	const xs = n.xs;
	const ts1 = n.c;
	const ts2 = p.second;
	Heap of a 
	{
	    compare: compare;
	    length: length-1;
	    ts: insertAll(p.first.xs, merge(ts1.reverse(), ts2))
	}
    }

    override function toString to String 
    {
        foldLeft("",
                 function from (y is String, x is a) to String
                 {
                     if (y == "") then "{x}" else "{y}, {x}";
                 })
    }
}

public function toHeap of a
    from (xs is a[]) to Heap of a 
{
    const ord = the Ordering of a;
    var h = Heap of a { 
	compare: function from (x is a, y is a) to Integer 
	{ 
	    const cmp = ord.compare(x, y); 
	    if cmp == Comparison.Less then -1 else if cmp == Comparison.Greater then 1 else 0; 
	}
    }
    for (x in xs) {
	h = h.insert(x);
    }
    return h;
}

function run {
    const h = toHeap([1..10]);
    println(h);
}