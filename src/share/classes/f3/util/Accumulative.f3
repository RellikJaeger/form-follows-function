package f3.util;

public interface Accumulative of a is org.f3.runtime.Foldable of a
{
    public abstract function accumulate of b
	from (accumulator is b, 
	      add is function from (b, a) to b) 
	to b; 

    public abstract function accumulateBackwards of b
	from (accumulator is b, 
	      add is function from (a, b) to b) 
	to b;

    // Foldable impl

    override function foldLeft of b
	from (z is b, 
	      f is function from (b, a) to b) 
	to b 
    {
	accumulate(z, f)
    }

    override function foldRight of b
	from (z is b, 
	      f is function from (a, b) to b) 
	to b 
    {
	accumulateBackwards(z, f)
    }

    public function partition from (f is function from a to Boolean) to (a[], a[]) 
    {
	accumulate(([] as a[], [] as a[]), 
		   function from (r is (a[], a[]), y is a) 
		   to (a[], a[]) 
		   {
		       if (f(y)) then ([r.first, y] as a[], r.second) else (r.first, [r.second, y] as a[]);
		   });
    }

}