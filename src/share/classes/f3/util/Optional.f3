package f3.util;
import org.f3.runtime.Monad;
import org.f3.runtime.F3Value;
import f3.lang.ConstRef;

/**
 * Represents an optional value of type 'a'
 *
 * For the algebraically inclined:
 *    Optional of a = 1 + a
 *
 * An Optional 'a' is a Functor and a Monad which means you can use it in 
 * a 'foreach' loop.
 */    

public abstract class Optional of a is Monad of (Optional, a), F3Value
{
    abstract override function map of b 
	from (f is function from a to b) 
	to Optional of b;

    abstract public function flatmap of b 
	from (f is function from a to Optional of b) 
	to Optional of b;

    abstract public function getOrElse from (y is a) to a;
    public function get to a { getOrElse of a (null) }

    public function isAbsent from () to Boolean 
    {
	not isPresent()
    }

    public function isPresent from () to Boolean 
    {
	not isAbsent()
    }
}

public class Present of a is Optional of a
{
    public const x is a;

    override function isPresent from () to Boolean 
    { 
	yes
   }

    override function map of b 
	from (f is function from a to b) 
	to Optional of b 
    {
	optionally(f(x))
    }

    override function flatmap of b 
	from (this is Present of a, f is function from a to Optional of b) 
	to Optional of b 
    {
	f(x)
    }

    override public function getOrElse from (y is a) to a
    { 
        x
    }

    public function coflatmap of b 
	from (f is function from Present of a to b) 
	to Present of b
    {
	Present of b 
	{
	    x: f(this)
	}
    }

    override function toString to String 
    {
	"present: {x}"
    }

    override function equals from (obj is Object) to Boolean 
    {
	(obj is Present of a) and {
	    const y = obj as Present of a;
	    x == y
	}
    }
}

public class Absent of a is Optional of a
{
    override function isAbsent to Boolean 
    {
	yes
    }

    override function map of b 
	from (f is function from a to b) 
	to Optional of b 
    {
	absent of b()
    }

    override public function flatmap of b 
	from (f is function from a to Optional of b) 
	to Optional of b 
    {
	absent of b()
    }

    override public function getOrElse from (y is a) to a
    { 
        y
    }

    override function toString to String 
    {
	"absent"
    }

    override function equals from (obj is Object) to Boolean 
    {
	obj is Absent of a
    }
}

public function optionally of a from (x is a) to Optional of a
{
    if ((x as Object) == null) then absent of a() else present(x)
}

public function present of a 
    from (x is a) 
    to Optional of a 
{
    Present of a 
    {
	x: x;
    }
}

public function absent of a to Absent of a
{
    Absence as Absent of a;
}

const Absence = Absent of null {};

public const TYPE_INFO = org.f3.runtime.TypeInfo.makeAndRegisterTypeInfo(Absence);

