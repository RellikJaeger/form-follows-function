package f3.util;
import org.f3.runtime.*;

// List = Empty | Unit x | Prepend x List | Append List x | Concat List List | ArrayList []

const EmptyList = Empty of null {};

function empty of b to List of b 
{
    EmptyList.getEmpty(null as b)
}

public abstract class List of a is Foldable of a, Monad of (List, a)
{
    public const length is Integer;

    function getEmpty of b from (x is b) to List of b 
    {
	EmptyList as List of b;
    }

    public function reverse to List of a 
    {
	foldLeft(empty() as List of a, (List of a).prepend)
    }

    override function toString to String 
    {
        foldLeft("",
                 function from (y is String, x is a) to String
                 {
                     if (y == "") then "{x}" else "{y}, {x}";
                 })
    }
    
    public function append from (x is a) to List of a
    {
	Prepend of a {
	    prefix: x;
	    suffix: this;
	}
    }

    public function prepend from (x is a) to List of a
    {
	Append of a {
	    prefix: this;
	    suffix: x;
	}
    }

    public function flatmap of b 
        from (f is function from a to List of b) to List of b
    {
        foldLeft(empty() as List of b, (List of b).concat * f);
    }

    override public function map of b 
        from (f is function from a to b) to List of b
    {
        foldLeft(empty() as List of b, (List of b).append * f);
    }

    public function concat 
	from (xs is List of a) 
	to List of a 
    {
	Concat of a 
	{
	    prefix: this;
	    suffix: xs;
	}
    }

    public function take from (n is Integer) to List of a 
    {
	var count = n;
	foldLeft(empty() as List of a,
		 function from (ys is List of a, x is a) to List of a
		 {
		     if (--count > 0) ys.append(x) else ys
		 })
    }

    public function drop from (n is Integer) to List of a 
    {
	var count = n;
	foldLeft(empty() as List of a,
		 function from (ys is List of a, x is a) to List of a
		 {
		     if (--count > 0) ys else ys.append(x)
		 })
    }
}

class ArrayList of a is List of a 
{

    const xs is a[];

    override const length = bind xs.size();

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
        xs.foldLeft(z, f)
    }

    override function foldRight of b 
        from (z is b, f is function from (a, b) to b)
        to b
    {
        xs.foldRight(z, f)
    }
}

class Empty of a is List of a 
{
    override const length = 0;

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
        z
    }

    override function foldRight of b 
        from (z is b, f is function from (a, b) to b)
        to b
    {
        z
    }

    public override function append from (x is a) to List of a
    {
	toList(x)
    }

    public override function prepend from (x is a) to List of a
    {
        toList(x)
    }
}


class Unit of a is List of a 
{
    const x is a;
    override const length = 1;

    override public function flatmap of b 
        from (f is function from a to List of b) to List of b
    {
	f(x)
    }

    override public function map of b 
        from (f is function from a to b) to List of b
    {
        toList(f(x))
    }

    override public function prepend from (x is a) to List of a
    {
        Prepend of a 
	{
	    prefix: x;
	    suffix: this;
	}
    }

    override public function append from (x is a) to List of a
    {
        Append of a 
	{
	    prefix: this;
	    suffix: x;
	}
    }

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
        f(z, x)
    }

    override function foldRight of b 
        from (z is b, f is function from (a, b) to b)
        to b
    {
        f(x, z)
    }
}

class Append of a is List of a 
{
    const prefix is List of a;
    const suffix is a;

    override const length is Integer = bind prefix.length + 1;

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
	const p = prefix.foldLeft(z, f);
	f(p, suffix)
    }

    override function foldRight of b 
        from (z is b, f is function from (a, b) to b)
        to b
    {
	const s = f(suffix, z);
	prefix.foldRight(s, f)
    }

    override public function flatmap of b 
        from (f is function from a to List of b) to List of b
    {
	Concat of b {
	    prefix: prefix.flatmap(f);
	    suffix: f(suffix);
	}
    }
}

class Prepend of a is List of a 
{
    const prefix is a;
    const suffix is List of a;

    override const length is Integer = bind suffix.length + 1;

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
	const p = f(z, prefix);
        suffix.foldLeft(p, f);
    }

    override function foldRight of b 
        from (z is b, f is function from (a, b) to b)
        to b
    {
	const s = suffix.foldRight(z, f);
	f(prefix, s);
    }

    override public function flatmap of b 
        from (f is function from a to List of b) to List of b
    {
	Concat of b 
	{
	    prefix: f(prefix);
	    suffix: suffix.flatmap(f);
	}
    }
}

class Concat of a is List of a 
{
    const prefix is List of a;
    const suffix is List of a;
    
    override const length = bind prefix.length + suffix.length;

    override function foldLeft of b 
        from (z is b, 
              f is function from (b, a) to b)
        to b
    {
	const p = prefix.foldLeft(z, f);
	suffix.foldLeft(p, f);
    }

    override function foldRight of b 
        from (z is b, 
	      f is function from (a, b) to b)
        to b
    {
	const s = suffix.foldRight(z, f);
        prefix.foldRight(s, f);
    }

    override public function flatmap of b 
        from (f is function from a to List of b) 
	to List of b
    {
	Concat of b 
	{
	    prefix: prefix.flatmap(f);
	    suffix: suffix.flatmap(f);
	}
    }

    override public function map of b 
        from (f is function from a to b) 
	to List of b
    {
	Concat of b 
	{
	    prefix: prefix.map(f);
	    suffix: suffix.map(f);
	}
    }

    override public function prepend from (x is a) to List of a
    {
	Concat of a 
	{
	    prefix: prefix.prepend(x);
	    suffix: suffix;
	}
    }

    override public function append from (x is a) to List of a
    {
	Concat of a 
	{
	    prefix: prefix;
	    suffix: suffix.append(x);
	}
    }
}

function emptyList of a to List of a 
{ 
    EmptyList as List of a;
}

function unit of a from (x is a) to List of a 
{ 
    Unit of a { x: x } 
}

public function toList of a from (x is a) to List of a { unit(x) }
public function asList of a from (xs is a[]) to List of a 
{
    ArrayList of a 
    {
	xs: xs;
    }
}

function run 
{
    const xs = asList([1..5]);
    println(xs);
    println(xs.reverse());
    println(foreach (x in xs, y in xs) 
	    {
		x * y;
	    })
}
