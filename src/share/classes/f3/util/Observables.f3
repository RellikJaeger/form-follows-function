package f3.util;
import f3.util.Observable.*;
import f3.util.Observer.*;
import f3.lang.*;

public class Println of a is DefaultObserver of a
{
    public var prefix is String;
    override function onNext from (x is a) to () 
    {
	println("{prefix}{x}");
    }
}

class PointerObserver of a is Subject of a {
    public const ptr is ObservableRef of a;
    var disp;
    init {
	disp = ptr.onReplace(this.onNext);
	onNext(ptr.get());
    }
}

public function observe of a 
    from (p is ObservableRef of a)
    to Subject of a
{
    PointerObserver of a {
	ptr: p
    }
}

public function If from (xs is Observable of Boolean) to Observable of (()) 
{
    foreach (x in xs.filter(id of Boolean)) ()
}

public function IfNot from (xs is Observable of Boolean) to Observable of (()) 
{
    foreach (x in xs.filter(function from (y is Boolean) to Boolean { not y })) ()
}

public class ThenElse {
    public const Then is Observable of (());
    public const Else is Observable of (());
}

public function IfThenElse from (xs is Observable of Boolean) to ThenElse
{
    ThenElse {
        Then: If(xs);
        Else: IfNot(xs);
    }
}

