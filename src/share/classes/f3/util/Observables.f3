package f3.util;
import f3.util.Observable.*;
import f3.util.Observer.*;
import f3.lang.*;

public class Println of a is DefaultObserver of a
{
    public var prefix is String;
    override function onNext from (x is a) to () 
    {
	println("{prefix}{x}");
    }
}

class PointerObserver of a is Subject of a {
    public const ptr is ObservableRef of a;
    var disp;
    init {
	disp = ptr.onReplace(this.onNext);
	try {
            onNext(ptr.get());
        } catch (e is java.lang.Exception) {
            e.printStackTrace()
        }
    }
}

class ReadonlyPointerObserver of a is Subject of a {
    public const ptr is ObservableConstRef of a;
    var disp;
    init {
	disp = ptr.onReplace(this.onNext);
	try {
            onNext(ptr.get());
        } catch (e is java.lang.Exception) {
            e.printStackTrace()
        }
    }
}

public function observe of a 
    from (p is ObservableRef of a)
    to Subject of a
{
    PointerObserver of a {
	ptr: p
    }
}

public function observe of a 
    from (p is ObservableConstRef of a)
    to Subject of a
{
    ReadonlyPointerObserver of a {
	ptr: p
    }
}

public function observe of a
    from (xs is (..a)[]) 
    to Observable of a 
{
    DefaultObservable of a {
	override public function subscribe 
	    from (observer is Observer of a) 
	    to Disposable 
	{
	    foreach (x in xs) {
		observer.onNext(x);
	    }
	    observer.onCompleted();
	    Disposable.empty();
	}
    }
}

/*
class Delay of a is Observable of a {
    public const dur is Duration;
    const src is Observable of a;
    override function subscribe from (y is Observer of a) to Disposable {
        const delegate = DefaultObserver of a {
            override function onNext from (x is a) to ()
            {
                const timer = new javax.swing.Timer(dur.toMillis());
                timer.addActionListener(java.awt.event.ActionListener {
                        override function actionPerformed from (e is java.awt.event.ActionEvent) to ()
                        {
                            timer.stop();
                            y.onNext(x);
                        }
                    });
            }
            onCompleted: y.onCompleted;
            onError: y.onError
        }
        src.subscribe(delegate);
    }
}

public function delay of a from (xs is Observable of a, dur is Duration) to Observable of a {
    Delay of a {
        src: xs;
        dur: dur
    }
         
}
*/
public function Filter of a 
    from (source is Observable of a, 
          predicate is function from a to Boolean) 
    to Observable of a
{
    source.filter(predicate)
}

public function If from (condition is Observable of Boolean) to Observable of (()) 
{
    foreach (x in condition.filter(id of Boolean)) ()
}

public function IfNot from (condition is Observable of Boolean) to Observable of (()) 
{
    foreach (x in condition.filter(function from (y is Boolean) to Boolean { not y })) ()
}

public class ThenElse {
    public const Yes is Observable of (());
    public const No is Observable of (());
}

public function IfThenElse from (xs is Observable of Boolean) to ThenElse
{
    ThenElse {
        Yes: If(xs);
        No: IfNot(xs);
    }
}

