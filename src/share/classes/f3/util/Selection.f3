package f3.util;

public static const monad = Monad of Selection {
    override function map of (a, b) 
	from (xs is Selection of a,
	      f is function from a to b) 
	to Selection of b 
    {
	xs.map(f)
    }

    override function flatmap of (a, b) 
	from (xs is Selection of a,
	      f is function from a to Selection of b) to Selection of b 
    {
	xs.flatmap(f)
    }

    override function return of a from (x is a) to Selection of a 
    {
	choose(x)
    }
}


public abstract class Selection of a is org.f3.runtime.Monad of (Selection, a) {

    public abstract function select of r from (f is function from a to r) to a;

    override function map of b from (f is function from a to b) to Selection of b 
    {
	const self = this;
	Selection of b {
	    override public function select of r from (k is function from b to r) to b 
	    {
		f(self.select(k * f))
	    }
	    override function toString to String {
	    	"map {self} {f}";
	    }		  
	}
    }

    public function flatmap of b from (f is function from a to Selection of b) to Selection of b 
    {
	const self = this;
	Selection of b {
	    override public function select of q from (k is function from b to q) to b 
	    {
		f(self.select(f)).select(k)
	    }
	    override function toString to String {
	    	"flatmap {self} {f}";
	    }		  
	}
    }


    public function toDoubleNegation to DoubleNegation of a 
    {
	DoubleNegation of a {
	    override public function negate of r from (p is function from a to r) to r 
	    {
		p(select(p));
	    }
	}
    }
}

public function choose of a from (x is a) to Selection of a 
{
    Selection of a {
	override function select of r from (f is function from a to r) to a {
	    x
	}
	override function toString to String {
	    "selected {x}"
	}
    }
}

public function run {
    const j = foreach (x in choose("hello"), y in choose("world")) {
	x.concat(" ").concat(y);
    }
    println(j);
    println(j.toDoubleNegation());
    println(choose(100).select(id of Integer));
}