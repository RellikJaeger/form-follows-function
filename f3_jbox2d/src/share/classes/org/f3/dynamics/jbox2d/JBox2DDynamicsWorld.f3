package org.f3.dynamics.jbox2d;
import f3.media.scene.*;
import f3.math.*;
import org.jbox2d.dynamics.World;
import org.jbox2d.dynamics.FixtureDef;
import org.jbox2d.collision.shapes.*;
import java.lang.Math;
import org.jbox2d.common.Vec2;
import f3.jogl.awt.JoglStage;
import java.util.concurrent.*;
const DEBUG_DRAW = java.lang.Boolean.getBoolean("f3.jbox2d.debug.physics");
const DISABLE_THREADS = java.lang.Boolean.getBoolean("f3.jbox2d.disable.threads");
const ENABLE_BAYAZIT = java.lang.Boolean.getBoolean("f3.jbox2d.enable.bayazit");
public const pool = Executors.newSingleThreadExecutor();

public class JBox2DDynamicsWorld is DynamicsWorld {

    public readonly var world is World;
    var lastTime is Long;

    const debugDrawer = new JoglDebugDraw();
    const toBeDeleted = new java.util.LinkedList of JBox2DCollider;
    var projectionMatrix is nativearray of Number = new nativearray of Number(16);
    var viewMatrix is nativearray of Number = new nativearray of Number(16);

    override function debugDraw from (camera is Camera) to ()
    {
        if (DEBUG_DRAW) {
            world.setDebugDraw(debugDrawer);
            var mat = camera.projectionMatrix;
            var m = projectionMatrix;
            for (r in [0..<4], c in [0..<4]) {
                m[c*4+r] = mat.get(r, c);
            }
            mat = camera.viewMatrix;
            m = viewMatrix;
            for (r in [0..<4], c in [0..<4]) {
                m[c*4+r] = mat.get(r, c);
            }
            debugDrawer.begin(JoglStage.THE_GL2, camera.width as Integer, camera.height as Integer,
                              projectionMatrix, viewMatrix);
            world.drawDebugData();
            debugDrawer.end();
        }
    }

    function handleDeleted to ()
    {
        for (x in toBeDeleted) {
            if (x.body <> null) {
                const body = x.body;
                x.body = null;
                world.destroyBody(body);
            }
            rigidBodies.remove(x);
        }
        toBeDeleted.clear();
    }

    override function update from (sceneTime is Duration, camera is Camera) to function to ()
    {
        if (requestedReset) {
            requestedReset = false;
            for (x in rigidBodies) { x.reset() }
            handleDeleted();
            world = null;
        }
        if (world == null) {
            world = new World(new Vec2(0, -9.8));
            world.setAllowSleep(no);
        }
        handleDeleted();
        const now = java.lang.System.currentTimeMillis();
        var delta is Number = 0.0;
        var iter = rigidBodies.iterator();
        while (iter.hasNext()) {
            const b = iter.next();
            if (b.target.get() == null) {
                world.destroyBody(b.body);
                iter.remove();
            } else {
                if (not paused) {
                    b.update();
                    b.fillTransform();
                }
            }
        }
        if (paused)  {
            return function to () {};
        }
        if (lastTime <> 0) {
            delta = ((now - lastTime) / 1000.0) as Number;
        }
        lastTime = now;
        const call = Callable of (()) {
            override function call to (()) {
                world.step(delta, 6, 2);
                return ();
            }
        }
        const fut = if not DISABLE_THREADS then pool.submit(call) else { call.call(); null }
        return function to () {
            fut.get();
            const iter = rigidBodies.iterator();
            while (iter.hasNext()) {
                const b = iter.next();
                if (b.target.get() == null) {
                    world.destroyBody(b.body);
                    iter.remove();
                } else {
                    b.drainTransform();
                }
            }
        }
    }

    const rigidBodies = new java.util.HashSet of JBox2DCollider;

    protected function addCollider from (x is JBox2DCollider) to ()
    {
        rigidBodies.add(x);
    }

    protected function removeCollider from (x is JBox2DCollider) to ()
    {
        toBeDeleted.add(x);
    }

    function applyForceFields to () {
        for (f in forceFields) {
            f.doApply(this, foreach (x in rigidBodies) x); // fix me: opt
        }
    }
    
    var forceFields is ForceField[];        

    override function addForceField from (field is ForceField) to ()
    {
        insert field into forceFields;
    }

    override function removeForceField from (field is ForceField) to ()
    {
        delete field from forceFields;
    }

    override function createCollider from (n is Node) to Collider
    {
        JBox2DCollider {
            target: new java.lang.ref.WeakReference of Node (n);
            world: this;
        }
    }

    var requestedReset = false;

    override function reset to ()
    {
        requestedReset = true;
    }

    protected function createShapes from (n is Node, collider is JBox2DCollider) to () 
    {
        if (false) {
            const ps = PolygonShape {}
            const b = n.getScalePivot().inverse() * n.bounds;
            println("creating shape: {b}");
            ps.setAsBox(b.extent.x, b.extent.y, new Vec2(b.center.x, b.center.y), 0);
            const fd = FixtureDef {};
            fd.shape = ps;
            fd.density = collider.mass / (b.width() * b.height());
            fd.friction = collider.friction;
            fd.restitution = collider.restitution;
            const fix = collider.body.createFixture(fd);
            println("fixture=>{fix}");
        }
        var result is Shape;
        var toLocal = (n.parentToSceneTransform * n.getScalePivot()).inverse();
        var shapes is Shape2D.MeshNode2D[];
        n.foldLeft((), 
                   function from (_ is (), n is Node) to () 
                   {
                       if (n is Shape2D.MeshNode2D) {
                           const parent = n.parent;
                           if (parent is Shape2D) {
                               const s = parent as Shape2D;
                               if (n == s.fillMesh) {
                                   insert (n as Shape2D.MeshNode2D) into shapes;
                               } else if (s.fillMesh == null) {
                                   // hmm
                               }
                           } else {
                               insert (n as Shape2D.MeshNode2D) into shapes;
                           }
                       }
                   });
        if (false and shapes.size() == 1) { // opt
        } else {
            var bs is Bounds[];
            for (shape in shapes) {
                const t = toLocal * shape.toSceneTransform;
                if (false) {
                    const ps = PolygonShape {}
                    var shapePoints = shape.path.getPoints(t);
                    if (ENABLE_BAYAZIT) {
                        shapePoints = PolyDecompBayazit {points: shapePoints}.points;
                    }
                    const v = foreach (pt in shapePoints) new Vec2(pt.x, pt.y);
                    ps.set(v, v.size());
                    const b = n.getScalePivot().inverse() * n.bounds;
                    const fd = FixtureDef {};
                    fd.shape = ps;
                    fd.density = collider.mass / (b.width() * b.height());
                    fd.friction = collider.friction;
                    fd.restitution = collider.restitution;
                    const fix = collider.body.createFixture(fd);
                } else {
                    const b = t * shape.bounds;
                    insert b into bs;
                }
            }
            var totalArea = 0.0;
            for (b in bs) {
                totalArea += (b.width() * b.height());
            }
            for (b in bs) {
                const ps = PolygonShape {}
                const fd = FixtureDef {};
                ps.setAsBox(b.extent.x, b.extent.y, new Vec2(b.center.x, b.center.y), 0);
                fd.shape = ps;
                fd.density = collider.mass * ((b.width() * b.height()) / totalArea);
                fd.friction = collider.friction;
                fd.restitution = collider.restitution;
                const fix = collider.body.createFixture(fd);
            }
        }
    }

}