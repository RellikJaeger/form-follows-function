package org.f3.dynamics.jbox2d;

import f3.media.scene.*;
import f3.math.*;
import f3.math.LinearMath.*;
import org.jbox2d.dynamics.World;
import org.jbox2d.dynamics.Body;
import org.jbox2d.dynamics.BodyDef;
import org.jbox2d.dynamics.BodyType;
import org.jbox2d.common.Vec2;
import java.lang.Math;

public class JBox2DCollider is Collider {

    public var target is java.lang.ref.WeakReference of Node;
    protected var body is Body;
    protected var world is JBox2DDynamicsWorld;

    override function update to ()
    {
        updateLocal();
    }

    override function getTarget to Node { target.get() }
    override function destroy to () {
        active = false;
        update();
        target.clear();
    }

    protected function fillTransform to () {
        if (body <> null) {
            if (bodyType <> RigidBodyType.Dynamic) {
                doFillTransform();
            }
        }
    }

    function doFillTransform to () {
        const m = getTarget().parentToSceneTransform * getTarget().getScalePivot();
        const t = m.getTranslation();
        const r = m.getRotation();
        body.setTransform(new Vec2(t.x, t.y), Math.toRadians(r.toAngles().z));
    }

    protected function drainTransform to () {
        if (body <> null) {
            const t = body.getTransform();
            //println("drain transform {t}");
            const n = getTarget();
            setCollisionWorldTransform(translate(t.p.x, t.p.y) * 
                                       rotate(Math.toDegrees(t.q.getAngle()), Vec3.Z_AXIS) *
                                       n.getScalePivot().inverse() * n.transform
                                       );
        }
    }

    protected function reset to ()
    {
        world.removeCollider(this)
    }
    
    public function updateLocal to ()
    {
        if (active) {
            if (body == null) {
                if (world.world <> null and not world.paused) {
                    createBody();
                    world.addCollider(this);
                }
            }
        } else {
            if (body <> null) {
                world.removeCollider(this);
            }
        }
    }

    override bound function isActive to Boolean {
        active and body <> null;
    }

    function createBody to () {
        const bd = BodyDef {};
        bd.type = if bodyType == RigidBodyType.Dynamic then BodyType.DYNAMIC else if bodyType == RigidBodyType.Kinematic then BodyType.KINEMATIC else BodyType.STATIC;
        bd.linearDamping = linearDamping;
        bd.angularDamping = angularDamping;
        bd.position = new Vec2(collisionInitialPosition.x, collisionInitialPosition.y);
        bd.angle = Math.toRadians(collisionInitialOrientation.z);
        bd.linearVelocity = new Vec2(collisionInitialVelocity.x, collisionInitialVelocity.y);
        bd.angularVelocity = collisionInitialVelocity.z;
        bd.gravityScale = gravityScale;
        println("create body: {bodyType}");
        println("bd.type=>{bd.type}");
        const n = getTarget();
        const t = n.toSceneTransform;
        body = world.world.createBody(bd);
        body.setSleepingAllowed(no);
        world.createShapes(target.get(), this);
        doFillTransform();
        if (bodyType == RigidBodyType.Dynamic) {
            setCollisionWorldTransform(t);
        }
        println("created body {body} mass=>{body.getMass()}");
    }

    protected function removeBody from (world is World) to () {
        if (body <> null) {
            world.destroyBody(body);
            body = null;
        }
        setCollisionWorldTransform(getTarget().toSceneTransform);
    }

    override function applyConstraint from (collider is Collider, constraint is RigidBodyConstraint) 
        to Boolean
    {
        false;
    }

    override function applyForce from (x is Number, y is Number, z is Number) to ()
    {
        body.applyForceToCenter(new Vec2(x, y));
    }

    override function applyTorque from (x is Number, y is Number, z is Number) to ()
    {
        body.applyTorque(Math.toRadians(z))
    }

    override function setAngularFactor from (v is Vec3) to ()
    {
    }

    override function setLinearFactor from (v is Vec3) to ()
    {
    }

    override function getLinearVelocity from () to Vec3
    {
        const v = body.getLinearVelocity();
        new Vec3(v.x, v.y, 0);
    }

    override function getAngularVelocity from () to Vec3
    {
        new Vec3(0, 0, Math.toDegrees(body.getAngularVelocity()))
    }

    override function setLinearVelocity from (x is Number, y is Number, z is Number) to ()
    {
        body.setLinearVelocity(new Vec2(x, y))
    }

    override function setAngularVelocity from (x is Number, y is Number, z is Number) to ()
    {
        body.setAngularVelocity(Math.toRadians(z))
    }

    override function applyImpulse from (x is Number, y is Number, z is Number) to ()
    {
        body.applyLinearImpulse(new Vec2(x, y), body.getWorldCenter(), true);
    }

    override function applyTarqueImpulse from (v is Vec3) to ()
    {
        applyTorqueImpulse(0, 0, v.z);
    }

    override function applyTorqueImpulse from (x is Number, y is Number, z is Number) to ()
    {
        body.applyAngularImpulse(z);
    }
}

