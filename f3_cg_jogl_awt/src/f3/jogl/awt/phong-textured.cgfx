uniform float4x4 worldViewProjection : WORLDVIEWPROJECTION;  
uniform float4x4 world : WORLD;  
uniform float4x4 viewInverse : VIEWINVERSE;
uniform float4x4 worldInverseTranspose : WORLDINVERSETRANSPOSE;  
uniform float3 lightWorldPos;  
uniform float4 ambientIntensity;  
uniform float4 lightIntensity;  
uniform float4 emissive;  
uniform float4 ambient;  
uniform float4 colorMult;  
uniform float4 diffuse;  
uniform float4 specular;  
uniform float shininess;  
sampler texSampler0;  
  
struct VertexShaderInput {  
  float4 position : POSITION;  
  float4 normal : NORMAL;  
  float2 tex : TEXCOORD0;  
};  
  
struct PixelShaderInput {  
  float4 position : POSITION;  
  float3 normal : TEXCOORD1;  
  float3 worldPosition : TEXCOORD4;  
  float2 tex : TEXCOORD0;  
};  
  
PixelShaderInput vertexShaderFunction(VertexShaderInput input) {  
  PixelShaderInput output;  
  output.position = mul(worldViewProjection, input.position);
  float3 worldPosition = mul(world, input.position).xyz;
  output.normal = mul(worldInverseTranspose, input.normal);
  output.normal = input.normal.xyz;
  output.worldPosition = worldPosition;  
  output.tex = input.tex;  
  return output;  
}  
  
float4 pixelShaderFunction(PixelShaderInput input) : COLOR {  
  float4 textureCooef = tex2D(texSampler0, input.tex);  
  float3 surfaceToLight = normalize(lightWorldPos - input.worldPosition);  
  float3 worldNormal = normalize(input.normal);  
  float3 surfaceToView = normalize(float3(viewInverse[0].w,
                                          viewInverse[1].w,
                                          viewInverse[2].w) -
                                   input.worldPosition);
  float3 halfVector = normalize(surfaceToLight + surfaceToView);  
  float4 litResult = lit(dot(worldNormal, surfaceToLight),  
                         dot(worldNormal, halfVector), shininess);  
  float4 outColor = ambientIntensity * ambient * colorMult * textureCooef;  
  outColor += lightIntensity * ((diffuse * textureCooef) * colorMult * litResult.y +  
      specular * litResult.z);  
  outColor += emissive;  
  return float4(outColor.rgb, diffuse.a * colorMult.a);
}  

technique T0 {
    pass P0 {
	DepthTestEnable = true;
        DepthFunc = Less;
        DepthMask = true;
        CullFaceEnable  = false; 
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        VertexShader = compile latest vertexShaderFunction();
        PixelShader  = compile latest pixelShaderFunction();
    }
}