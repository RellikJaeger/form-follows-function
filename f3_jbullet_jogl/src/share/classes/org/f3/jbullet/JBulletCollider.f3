package org.f3.jbullet;

import com.bulletphysics.dynamics.RigidBody;
import com.bulletphysics.dynamics.RigidBodyConstructionInfo;
import com.bulletphysics.linearmath.MotionState;
import com.bulletphysics.collision.dispatch.CollisionObject;
import com.bulletphysics.collision.dispatch.CollisionFlags;
import com.bulletphysics.collision.dispatch.CollisionWorld;
import com.bulletphysics.collision.shapes.BoxShape;
import com.bulletphysics.collision.shapes.CollisionShape;
import com.bulletphysics.collision.shapes.StaticPlaneShape;
import com.bulletphysics.collision.shapes.TriangleIndexVertexArray;
import com.bulletphysics.collision.shapes.BvhTriangleMeshShape;
import java.lang.System;
import java.util.*;
import f3.math.*;
import f3.math.LinearMath.*;
import f3.media.scene.*;
import java.lang.Comparable;
import javax.vecmath.Vector3f;

public class CMotionState is MotionState {
    public var c is java.lang.ref.WeakReference of JBulletCollider;
    public var rb is CollisionObject;
    public const world is JBulletDynamicsWorld;
    public var worldMatrix is nativearray of Number;

    public function fillWorldMatrix to () {
        c.get().fillWorldMatrix(worldMatrix);
    }
    public function drainWorldMatrix to () {
        const c = this.c.get();
        if (c.getRigidBody() == rb) {
            if (c.bodyType == RigidBodyType.Dynamic) {
                c.drainWorldMatrix(worldMatrix);
            }
        } else {
            println("dead motion state {c}");
            if (rb <> null) {
                world.enqueueForDelete(rb);
                rb = null;
            }
        }
    }
    override public function getWorldTransform 
        from (out is com.bulletphysics.linearmath.Transform) 
        to com.bulletphysics.linearmath.Transform 
    {
        out.setFromOpenGLMatrix(worldMatrix);
        return out;
    }
    
    override public function setWorldTransform from (out is com.bulletphysics.linearmath.Transform) to ()
    {
        out.getOpenGLMatrix(worldMatrix);
    }
}


public class JBulletCollider is Collider {

    public var target is java.lang.ref.WeakReference of Node;
    
    var collisionShape is com.bulletphysics.collision.shapes.CollisionShape;

    public function getWorldTransform to Mat4 {
        const n = target.get();
        if n == null then Mat4.<<1>> else {
                (if bodyType == RigidBodyType.Dynamic then getCollisionWorldTransform() else n.toSceneTransform) * translate(centerOfMass);
            }
    }
    
    public function getCollisionShape to com.bulletphysics.collision.shapes.CollisionShape
    {
        if (collisionShape == null) {
            collisionShape = _dynamicsWorld().createCollisionShape(target.get(), colliderShape);
            if (collisionShape == null) {
                active = false;
            }
        }
        return collisionShape;
    }
    
    override var friction is Number = 0.5 on replace {
        _rigidBody.setFriction(friction);
    };
    override var restitution is Number on replace {
        _rigidBody.setRestitution(restitution);
    };
    override var active is Boolean = true on replace {
        activate();
    };

    var _rigidBody is CollisionObject;
    
    public bound var rigidBody = if (_rigidBody is RigidBody) then _rigidBody as RigidBody else null;
    
    override var angularDamping is Number = 0.5 on replace {
        getRigidBody().setDamping(linearDamping, angularDamping);
    };
    override var linearDamping is Number = 0.0 on replace {
        getRigidBody().setDamping(linearDamping, angularDamping);
    };

    protected bound function getRigidBody to RigidBody 
    {
        _rigidBody as RigidBody;
    }
    
    override public function applyForce from (v is Vec3) to ()
    {
        applyForce(v.x, v.y, v.z);
    }
    
    override public function applyForce from (x is Number, y is Number, z is Number) to ()
    {
        if (_rigidBody is RigidBody){
            const force = new Vector3f(x, y, z);
            (_rigidBody as RigidBody).applyCentralForce(force);
        }
    }

    override public function applyTarque from (v is Vec3) to ()
    {
        applyTorque(v.x, v.y, v.z);
    }
    
    override public function applyTorque from (x is Number, y is Number, z is Number) to () 
    {
        if (_rigidBody instanceof RigidBody){
            const force = new Vector3f(x, y, z);
            (_rigidBody as RigidBody).applyTorque(force);
        }
    }
    
    override public function setAngularFactor from (v is Vec3) to ()
    {
        //const v' = new Vector3f(v.x, v.y, v.z);
        //(_rigidBody as RigidBody).setAngularFactor(v');
    }
    
    override public function setLinearFactor from (v is Vec3) to () 
    {
        //const vv = new javax.vecmath.Vector3f(v.x, v.y, v.z);
        //(_rigidBody as RigidBody).setLinearFactor(v);
    }

    override public function getLinearVelocity from () to Vec3 
    {
        const v = getRigidBody().getLinearVelocity(new javax.vecmath.Vector3f());
        return new Vec3(v.x, v.y, v.z);
    }

    override public function getAngularVelocity from () to Vec3 
    {
        const v = getRigidBody().getAngularVelocity(new javax.vecmath.Vector3f());
        return new Vec3(v.x, v.y, v.z);
    }

    override public function setLinearVelocity from (v is Vec3) to () {
        setLinearVelocity(v.x, v.y, v.z);
    }

    override public function setLinearVelocity from (x is Number, y is Number, z is Number) to () 
    {
        getRigidBody().setLinearVelocity(new javax.vecmath.Vector3f(x, y, z));
    }

    override public function setAngularVelocity from (v is Vec3) to () 
    {
        setAngularVelocity(v.x, v.y, v.z);
    }

    override public function setAngularVelocity from (x is Number, y is Number, z is Number) to () 
    {
        getRigidBody().setAngularVelocity(new javax.vecmath.Vector3f(x, y, z));
    }

    override public function applyImpulse from (v is Vec3) to () 
    {
        applyImpulse(v.x, v.y, v.z);
    }

    override public function applyImpulse from (x is Number, y is Number, z is Number) to () 
    {
        if (_rigidBody instanceof RigidBody){
            const force = new Vector3f(x, y, z);
            (_rigidBody as RigidBody).applyCentralImpulse(force);
        }
    }

    override public function applyTarqueImpulse from (v is Vec3) to () {
        applyTorqueImpulse(v.x, v.y, v.z);
    }

    override public function applyTorqueImpulse from (x is Number, y is Number, z is Number) to () {
        if (_rigidBody instanceof RigidBody){
            const force = new Vector3f(x, y, z);
            (_rigidBody as RigidBody).applyTorqueImpulse(force);
        }
    }

    function addContact from (pt is ContactPoint) to () {
        for (c in collisions) {
            if (c.collider == pt.otherCollider) {
                var found = false;
                for (cp in c.contacts) {
                    if (pt == cp) {
                        found = true;
                        break;
                    }
                }
                if (not found) {
                    insert pt into c.contacts;
                }
                return;
            }
        }
        var collision = Collision { 
            collider: pt.otherCollider;
            contacts: [pt] 
        };
        addCollision(collision);
        if (onCollisionEnter <> null) {
            onCollisionEnter(collision);
        }
    }

    function removeContact from (pt is ContactPoint) to () {
        for (c in collisions) {
            if (c.collider == pt.otherCollider) {
                if (sizeof c.contacts == 1) {
                    var collision = c;
                    delete this.collisions[indexof c];
                    if (onCollisionLeave <> null) {
                        onCollisionLeave(collision);
                    }
                } else {
                    delete pt from c.contacts;
                }
                break;
            }
        }
    }
    
    public var motionState is CMotionState;

    protected function createRigidBody from (colShape is CollisionShape) to () {
        if (_rigidBody <> null) { return }
        if (_dynamicsWorld() == null or colShape == null or _dynamicsWorld().paused) {
            return;
        }
        println("creating rigid body {this} collidable={target.get()} w={_dynamicsWorld()} mass={mass} bodyType={bodyType} {colShape}");
        var self = this;
        motionState = CMotionState {
            c: new java.lang.ref.WeakReference of JBulletCollider(self);
            world: _dynamicsWorld();
        }
        motionState.worldMatrix = java.lang.reflect.Array.newInstance(java.lang.Float.TYPE, 16) as nativearray of Number; 
        setCollisionWorldTransform(getTarget().toSceneTransform * translate(centerOfMass));
        fillWorldMatrix(motionState.worldMatrix);
        if (true) {
            var localInertia = new Vector3f(0, 0, 0);
            if (mass <> 0) {
                colShape.calculateLocalInertia(mass, localInertia);
            }
            var rigidBody is RigidBody;
            var rbinfo = new RigidBodyConstructionInfo(mass, motionState,
                                                       colShape, localInertia);
            rbinfo.linearDamping = linearDamping;
            rbinfo.angularDamping = angularDamping;
            if (bodyType <> RigidBodyType.Dynamic) {
                rigidBody = new RigidBody(rbinfo);
                if (true or bodyType == RigidBodyType.Kinematic) {
                    rigidBody.setCollisionFlags(CollisionFlags.KINEMATIC_OBJECT);
                } else {
                    rigidBody.setCollisionFlags(CollisionFlags.STATIC_OBJECT);
                }
                rigidBody.setActivationState(CollisionObject.DISABLE_DEACTIVATION);
            } else {
                rigidBody = new RigidBody(rbinfo);
            }
            _rigidBody = rigidBody;
            _rigidBody.setFriction(friction);
            _rigidBody.setRestitution(restitution);
            _rigidBody.setUserPointer(new java.lang.ref.WeakReference of Collider(this));
            var v = new javax.vecmath.Vector3f();
            if (collisionInitialVelocity <> null) {
                v.set(collisionInitialVelocity.x,
                      collisionInitialVelocity.y, 
                      collisionInitialVelocity.z);
                rigidBody.setLinearVelocity(v);
            }
            if (collisionInitialSpin <> null) {
                v.set(collisionInitialSpin.x, 
                      collisionInitialSpin.y, 
                      collisionInitialSpin.z);
                rigidBody.setAngularVelocity(v);
            }

            if (collisionInitialOrientation <> null) {
                // fix me
            }
            setLinearFactor(linearFactor);
            setAngularFactor(angularFactor);
            _dynamicsWorld().addRigidBody(_rigidBody as RigidBody);
        } else {
            _rigidBody = CollisionObject {
                override public function getWorldTransform(out is com.bulletphysics.linearmath.Transform) to com.bulletphysics.linearmath.Transform {
                    var result = out;
                    if (result == null) {
                        result = new com.bulletphysics.linearmath.Transform();
                    }
                    out.setFromOpenGLMatrix(motionState.worldMatrix);
                    return result;
                }
            };
            _rigidBody.setUserPointer(new java.lang.ref.WeakReference of Collider(this));
            _rigidBody.setCollisionFlags(CollisionFlags.KINEMATIC_OBJECT);
            _rigidBody.setCollisionShape(colShape);
            _rigidBody.setFriction(friction);
            _rigidBody.setRestitution(restitution);
            _dynamicsWorld().getDynamicsWorld().addCollisionObject(_rigidBody);
        }
        motionState.rb = _rigidBody;
    }

    protected function removeRigidBody to () {
        if (_rigidBody <> null) {
            _currentlyActive = false;
            _dynamicsWorld().enqueueForDelete(_rigidBody);
            _rigidBody = null;
            setCollisions([]);
            collisionMap = null;
        }
        setCollisionWorldTransform(getTarget().toSceneTransform * translate(centerOfMass));
        fillWorldMatrix(motionState.worldMatrix);
    }

    protected function mergeCollisions from (map is Map of (JBulletCollider, Set of ContactPoint)) to () {
        // Map<Collider, Set<ContactPoint> >
        if (collisionMap == map) {
            return;
        }
        var toBeAdded = new HashSet of JBulletCollider();
        var toBeRemoved = new HashSet of JBulletCollider();
        var all = new HashSet of JBulletCollider();
        if (collisionMap <> null) {
            all.addAll(collisionMap.keySet());
        }
        if (map <> null) {
            all.addAll(map.keySet());
        }
        var iter = all.iterator();
        var enter is Collision[];
        var leave is Collision[];
        while (iter.hasNext()) {
            var collider = iter.next();
            var curPts = collisionMap.get(collider) as Set;
            var newPts = map.get(collider);
            if (curPts == null) {
                var qi = newPts.iterator();
                var nc = Collision {
                    collider: collider;
                    contacts: foreach (j in [0..<newPts.size()]) {
                        qi.next() as ContactPoint;
                    }
                };
                addCollision(nc);
                if (onCollisionEnter <> null) {
                    insert nc into enter;
                }
            } else if (newPts == null) {
                var xs is Integer[];
                for (i in collisions) {
                    if (i.collider == collider) {
                        insert indexof i into xs;
                    }
                }
                for (i in xs.reverse()) {
                    if (onCollisionLeave <> null) {
                        insert collisions[i] into leave;
                    }
                    delete collisions[i];
                }
            } else {
                for (i in collisions) {
                    if (i.collider == collider) {
                        const q = newPts.iterator();
                        i.contacts = 
                            foreach (j in [0..<newPts.size()]) {
                                q.next() as ContactPoint;
                            };
                        break;
                    }
                }
            }
        }
        if (onCollisionLeave <> null) {
            for (i in leave) {
                onCollisionLeave(i);
            }
        }
        if (onCollisionEnter <> null) {
            for (i in enter) {
                onCollisionEnter(i);
            }
        }
        collisionMap = map;
    }

    // Map<Collider, Set<ContactPoint> >
    var collisionMap is Map of (JBulletCollider, Set of ContactPoint);

    public function fillWorldMatrix from (worldMatrix0 is nativearray of Number) to () {
        if (worldMatrix0 == null) return;
        var worldMatrix = worldMatrix0;
        const n = target.get();
        if (n <> null) {
            const t = 
                (if bodyType == RigidBodyType.Dynamic then getCollisionWorldTransform() else n.toSceneTransform) * translate(centerOfMass);
            for (c in [0..<4], r in [0..<4]) {
                worldMatrix[c*4+r] = t.get(r, c);
            }
        }
    }

    function drainWorldMatrix from (worldMatrix is nativearray of Number) to () {
        const t = Mat4.fromColumns(worldMatrix);
        setCollisionWorldTransform(t * translate(-centerOfMass));
        if (not _currentlyActive) {
            _currentlyActive = true;
        }
    }

    public override function applyConstraint from (other0 is Collider, c is RigidBodyConstraint) to Boolean 
    {
        if (c.impl == null) { // hack
            if (c is HingeConstraint) {
                c.impl = JBulletHingeConstraint { constraint: c as HingeConstraint }
            } else if (c is PointToPointConstraint) {
                c.impl = JBulletPointToPointConstraint { constraint: c as PointToPointConstraint }
            }
            println("CREATING CONSTRAINT IMPL => {c.impl} for {c} from {this} to {other0}");
        }
        const other = other0 as JBulletCollider;
        if (_dynamicsWorld() == null) {
            return false;
        }
        const rb1 = _rigidBody as com.bulletphysics.dynamics.RigidBody;
        const rb2 = other._rigidBody as com.bulletphysics.dynamics.RigidBody;
        if (rb1 <> null and rb2 <> null) {
            try {
                const tc = (c.impl as JBulletRigidBodyConstraint).getConstraint(rb1, rb2);
                _dynamicsWorld().addConstraint(tc);
                return true;
            } catch (e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    public var shape is Collidable;

    override function destroy to ()
    {
        removeRigidBody();
        target.clear();
    }

    override function getTarget to Node { target.get() }

    var _currentlyActive is Boolean;   

    override public bound function isActive to Boolean { _currentlyActive }
      
    function activate from () to () {
        if (not active) {
            removeRigidBody();
        }
    }

    protected function reactivate from () to () 
    {
        removeRigidBody();
    }

    override function update from () to () 
    {
        if (_dynamicsWorld() <> null) {
            if (_rigidBody == null) {
                if (active) {
                //                    println(initialTransform);
                    if (bodyType == RigidBodyType.Dynamic)  {
                        setCollisionWorldTransform(initialTransform);
                    }
                    createRigidBody(getCollisionShape());
                }
            }
        }
        if (_dynamicsWorld() <> null) {
            for (c in constraints) c.apply();
        }
    }

    protected function _dynamicsWorld from () to JBulletDynamicsWorld {
        dynamicsWorld as JBulletDynamicsWorld;
    }

    function getCollisionWorldTransform to Mat4 {
        return collisionWorldTransform;
    }

}
