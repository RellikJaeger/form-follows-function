package org.f3.jbullet;
import java.lang.Math;
import f3.media.scene.*;
import f3.media.scene.RigidBodyConstraint;
import f3.math.*;
import f3.math.LinearMath.*;

const NEG_Z_AXIS = new Vec3(0, 0, -1);
const Y_AXIS = new Vec3(0, 1, 0);

public class JBulletHingeConstraint is JBulletRigidBodyConstraint of HingeConstraint {

    override protected function createConstraint(a is com.bulletphysics.dynamics.RigidBody,
                                                 b is com.bulletphysics.dynamics.RigidBody) 
        to com.bulletphysics.dynamics.constraintsolver.TypedConstraint 
    {
        var ct is com.bulletphysics.dynamics.constraintsolver.HingeConstraint;
        const c1 = constraint.node1.collider as JBulletCollider;
        const c2 = constraint.node1.collider as JBulletCollider;
        const w1 = if (constraint.worldSpace and constraint.node1 <> null) then c1.getWorldTransform() else Mat4.<<1>>;
        const w2 = if (constraint.worldSpace and constraint.node2 <> null) then c2.getWorldTransform() else Mat4.<<1>>;
        if (constraint.usePivots) {
            const pivotInA = w1.inverse() * constraint.pivotInA;
            const pivotInB = w2.inverse() * constraint.pivotInB;
            var q = rotate(constraint.rotInA).getRotation();
            const axisInA = (q * NEG_Z_AXIS).normalize();
            q = rotate(constraint.rotInB).getRotation();
            const axisInB = (q * NEG_Z_AXIS).normalize();
            if (a == null) {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(b,
                                                                                     Util.convertToBullet(pivotInB, null), 
                                                                                     Util.convertToBullet(axisInB, null));
            } else if (b == null) {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(a,
                                                                                     Util.convertToBullet(pivotInA, null), 
                                                                                     Util.convertToBullet(axisInA, null));
            } else {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(a, b,
                                                                                     Util.convertToBullet(pivotInA, null), 
                                                                                     Util.convertToBullet(pivotInB, null),
                                                                                     Util.convertToBullet(axisInA, null),
                                                                                     Util.convertToBullet(axisInB, null));
            }
        } else {
            const frame = translate(constraint.initialPosition) * rotate(constraint.initialOrientation);
            const frameA = w1.inverse() * frame;
            const frameB = w2.inverse() * frame;
            if (a == null) {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(b, 
                                                                                     Util.convertToBullet(frameB, null));
            } else if (b == null) {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(a, 
                                                                                     Util.convertToBullet(frameA, null));
            } else {
                ct = new com.bulletphysics.dynamics.constraintsolver.HingeConstraint(a, 
                                                                                     b,
                                                                                     Util.convertToBullet(frameA, null),
                                                                                     Util.convertToBullet(frameB, null));
            }
        }
        ct.enableAngularMotor(constraint.angularMotor, 
                              constraint.angularMotorVelocity,
                              constraint.angularMotorMaxForce);
        ct.setLimit(constraint.angularConstraintMin,
                    constraint.angularConstraintMax, 
                    constraint.angularLimitSoftness, 
                    constraint.angularLimitBias,
                    constraint.angularLimitRelaxation);
        println("CREATED RIGID BODY constraint {ct} from {constraint.node1.id} to {constraint.node2.id}");
        return ct;
    }
}
